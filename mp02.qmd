---
title: "IMDb and Me"
subtitle: "A deep dive into movie data with R"
format:
  html:
    favicon: "images/favicon.ico"
execute:
  cache: true
editor: 
  markdown: 
    wrap: 72
---


```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr) 
library(tidyr) 
library(stringr) 
library(lubridate) 
library(readr) 
library(ggplot2)
library(scales)

```

*This project useses the following packagaes*: `dplyr`, `tidyr`,
`stringr`, `lubridate`, `readr`, `scales`

*For details on the data used for this project see* [Appendix
A](#appendixA).


Originating in the proto-Internet era of Usenet groups in the early
1990s, the Internet Movie Database (with its instantly recognizable
acronym: IMDb) has long been an indispensable source of pop culture
information. Movie buffs, film industry professionals, trivia
enthusiasts, and casual web surfers all agree IMDb is the go-to resource
for anyone engaged in the history of motion pictures.

## What's in the box?

### How many green lights have been granted in Hollywood?

The "M" in the moniker obviously denotes "movie" and there are indeed
`131,890` traditional "movies" in IMDb. However, many take a different
interpretations as to what is - and what is not - a "movie" and IMDb
maintains a separate designation for `tvMovie`.

The author contends that the films produced by the premium television
outlet Home Box Office are significant films all-too-often overlooked by
film afficianados and sure enough, HBO films are considered television
films by IMDb :

```         
titleType   primaryTitle            startYear
tvMovie     And the Band Played On  1993

titleType   primaryTitle            startYear
tvMovie     Recount                 2008
  
titleType   primaryTitle            startYear
tvMovie     Conspiracy              2001
```

Not an HBO original, but this `tvMovie` is partially credited for
[ending The Cold
War](https://en.wikipedia.org/wiki/The_Day_After#Effects_on_policymakers):

```         
titleType   primaryTitle    startYear
tvMovie     The Day After   1983
```

The above are all noteworthy (underrated) films more than deserving to
be considered and counted alongside IMDb's critera for "movie". If we
were to count both `movie` and `tvMovie` we would find `146,915` movie
titles in IMDb.

...Speaking of television, that "M" in IMDb can be something of a
misnomer. IMDb collects data on both film and television too. And within
the database, IMDb doesn't just maintain an entry for every television
series, but actually has a record for each televison season and a record
for every televsion episode. All told there are `29,868` series within
IMDb represented by over `3,012,678` individual episdoes.

If television is collected this extensively in the database, what else
does IMDb collect? What else is in the database?

![](images/mp-02/1_media_types_counts.jpeg){style="width:75%; box-shadow: -1px 1px 2px rgba(0, 0, 0, 0.5); display: block; margin: auto;"}

I'd argue the collection of Video Games will prove increasingly
important as this media form grows in cultural influence. I can
certainly see a future where Video Games are of equal cultural
significance (...if were not at that momemnt already?) as film and TV is
today.

<details>

<summary>\> show the code</summary>

``` r
# How many films are in IMDb? 
TITLE_BASICS |> 
  filter(titleType == "movie" | titleType == "tvMovie") |>
  count()

# What if we include TV Moives?   
TITLE_BASICS |> 
  filter(titleType == "movie" | titleType == "tvMovie") |>
  count()

# What if we searched for a particular HBO Moive?    
TITLE_BASICS |> 
  filter(primaryTitle == "And the Band Played On") |> 
  select(titleType, primaryTitle, startYear)

# How many television series are in IMDb? 
TITLE_BASICS |> 
  filter(titleType == "tvSeries") |>
  count()

# How many individual episodes are collected? 
TITLE_EPISODES |>
  nrow()

# What are the different title types in IMDb  
title_type_counts <- TITLE_BASICS |> 
  group_by(titleType) |> 
  summarize(count = n())

# Let's visualize the breakdown of all the different title types
ggplot(title_type_counts, aes(x = "", y = count, fill = titleType)) + 
  geom_bar(stat = "identity", width = 0.7) +
  labs(title = "IMDb Media Types and Their Counts", x = NULL, y = "Count") +
  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
  scale_fill_brewer(palette = "Paired")
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  
```

</summary>
</details>

### 110 years old you reach, look as good you will not

IMBb is a unrivaled resource for assessing film history. And by history,
there is actually some capital "H" history in IMDb.

IMDb counts `4` as the oldest `birthYear` for any individual in its
dataset. And not just `4`, there are also `birthYear` values for `46`,
`69`, `70`, `163`, `254`. As far as we know, film production is a \~150
year old technology.

What is going on?

Who was born in year `4`? Year `46`? Year `69`?

``` r
             primaryName
1       Flavius Josephus
2 Publius Vergilius Maro
3                   Ovid
4  Titus Maccius Plautus
5     Lucio Anneo Seneca
6            Cassius Dio
7               Plutarch
8              Suetonius
```

Are you entertained? A fascinating qwirk of IMDb database is that it
credits classical writers and historians for modern film production,
again, proving IMDb is if nothing else an historical resource and begs
the important question?

*Does Zach Snyder share [300](https://en.wikipedia.org/wiki/300_(film))
points with Plutarch?*

But how about someone we know or can identify? Who is eldest creator
still alive in the IMDb database? A seemingly easy way to identify
"oldest creator in IMDb" would be to seek out creators with an `NA` for
`deathYear`.

Unfortunately there are quite a few people IMDb considers living in
their sunset years. IMDb idetifies 2,514 "supercentarians" - individuals
110 years of age or older - who at one time worked the film industry.

The [Gerontology Research Group](https://www.grg-supercentenarians.org/)
rigorously counts "supercentarians" around the world. A supercentarian
is an individual equal-to, or older-than, the age of 110. At current
count, there are approximately \~310 supercentarians in the world.

Clearly there is an issue with the IMDb dataset identifying `2,514`
supercentarians in the film industry. There obviously are a multitude of
deaths unreported in this data.

But, just because you're old and you possibly "one-time-maybe did
something in the film industry", should anyone care? There are millions
of people who throughout their lives have no-doubt been involved in at
least 1 movie production in their lives. Does "old person who once
worked on a forgotten independent movie no-one-saw" really communicate
anything to us?

I posit that anyone who did anything significant in the film industry
would have their `deathYear` duly reported. Therefore, let's re-start
our search and see if we can arrive at a collection of individuals
"significant enough in the film industry" to warrant our interest and
attention.

Let's first try to identify "significant film productions" in our data.

I'm going to use the measure of: "if this film had a lot of people
working on it, it no doubt cost a lot of money and was of notable
interest to some studio or production company." So I'm going to count
the number of crew on a film and look for a threshold for top
produciton.

Here are the quantiles for the crew counts:

```         
10%  20%  30%  40%  50%  60%  70%  80%  90% 100% 
10   14   16   18   19   20   21   22   24   65 
```

`90%` of all productions have `24+` or more crew numbers working on
them. I'm going to identify any person "significant" in the films
industry as someone who has worked on `20+` such productions. Sorted on
`number_of_big_productions` worked on, sure enough this yields useful
information:

| Name              | Birth Year | number_of_big_productions | age | deathYear |
|-------------------|------------|---------------------------|-----|-----------|
| Seth MacFarlane   | 1973       | 2505                      | 51  | 0         |
| Dee Bradley Baker | 1962       | 2311                      | 62  | 0         |
| Dan Castellaneta  | 1957       | 2242                      | 67  | 0         |
| Hank Azaria       | 1964       | 2191                      | 60  | 0         |
| Harry Shearer     | 1943       | 2162                      | 81  | 0         |
| Eric Stuart       | 1967       | 2043                      | 57  | 0         |

: Data for Big Productions by Various Individuals, Including Age
{.striped .hover}

These names are all identifiable as prominent voice actors. So with this
collection of notable individuals, let's idenfity the oldest individual
in this data set:

| primaryName | birthYear | number_of_big_productions | age | deathYear |
|-------------|-----------|---------------------------|-----|-----------|
| Mel Brooks  | 1926      | 37                        | 98  | 0         |

: What a find {.striped .hover}

<details>

<summary>\> show the code</summary>

``` r
# Who is the oldest individual in IMDb?
min(NAME_BASICS$birthYear, na.rm=TRUE)

# A birthyear of '4'! Is this a mistake? 
sort(unique(NAME_BASICS$birthYear))

# Who are these individuals? 
NAME_BASICS |> 
  filter(
    birthYear == 4 | 
    birthYear ==  37 |
    birthYear ==  43 | 
    birthYear == 46 | 
    birthYear == 69 | 
    birthYear == 70 |
    birthYear == 163 | 
    birthYear == 254
    ) |> 
  select(primaryName)
  
# Are there really that many 110 year-olds in this database? 
NAME_BASICS |>
  filter(birthYear <= 1914 & is.na(deathYear)) |>
  nrow()

# Let's count the amont of crew working for a poduction 
crew_counts_for_title <- TITLE_PRINCIPALS |> 
  group_by(tconst) |> 
  summarize(crew_members = n()) 

# Can we identify the threshold for 'big production' by crew count?
quantile(crew_counts_for_title$crew_members, probs = seq(0.1, 1, by=.1))

# Top 90% of productions have 24 crew members, so let's use that threshold
big_productions <- crew_counts_for_title |> 
  filter(crew_members >= 24)

# Using 24 crew members as a citeria for "big production", this
# identifies all of the individuals who have worked on 20 or more 
# such productions, creating the criteria we're using for "significant 
# individuals in film and television"
name_ids_in_many_big_productions <- big_productions |> 
  inner_join(TITLE_PRINCIPALS, by="tconst") |>
  group_by(nconst) |> 
  summarize(number_of_big_productions = n()) |> 
  filter(number_of_big_productions > 20) |> 
  arrange(desc(number_of_big_productions))

# Mathching up these ids with names 
names_in_many_big_productions <- name_ids_in_many_big_productions |>
  inner_join(NAME_BASICS, join_by(nconst == nconst)) |>
  mutate(deathYear = ifelse(is.na(deathYear), 0, deathYear)) |> 
  mutate(age = ifelse(deathYear == 0, 2024 - birthYear, deathYear - birthYear)) |> 
  select(primaryName, birthYear, number_of_big_productions, age, deathYear, nconst)

# Who is the oldest individual in this data set?
names_in_many_big_productions |> 
  filter(deathYear == 0) |>
  arrange(desc(age)) |>
  slice(1)
```

</summary>

</details>

### Singular TV Episode rated highly

| series_title | episode_title | year |
|--------------|---------------|------|
| Breaking Bad | Ozymandias    | 2013 |

: Hank! {.striped .hover}

<details>

<summary>\> show the code</summary>

``` r
top_episodes <- TITLE_RATINGS |>
  filter(averageRating == 10 & numVotes >= 200000)

episode_details <- top_episodes |>
  inner_join(TITLE_BASICS, by = "tconst") |>
  inner_join(TITLE_EPISODES, by = "tconst")
  
episode_details |>
  inner_join(TITLE_BASICS, join_by("parentTconst" == "tconst")) |>
  select(series_title = primaryTitle.y, episode_title = primaryTitle.x, year = startYear.x)
```

</details>

### Star Wars and Mark Hamill

| primaryName | primaryTitle                                   | startYear |
|-------------|------------------------------------------------|-----------|
| Mark Hamill | Star Wars: Episode IV - A New Hope             | 1977      |
| Mark Hamill | Star Wars: Episode V - The Empire Strikes Back | 1980      |
| Mark Hamill | Star Wars: Episode VI - Return of the Jedi     | 1983      |
| Mark Hamill | Star Wars: Episode VIII - The Last Jedi        | 2017      |

: Data for Mark Hamill's Star Wars Movies {.striped .hover}

<details>

<summary>\> show the code</summary>

``` r
mark_hamil_popular_works_IDs <- NAME_BASICS |>
  filter(primaryName == "Mark Hamill") |>
  separate_rows(knownForTitles, sep =",")
  
mark_hamil_popular_works_IDs |> 
  inner_join(TITLE_BASICS, by = c("knownForTitles" = "tconst")) |> 
  select(primaryName, primaryTitle, startYear) |>
  arrange(startYear)
```

</details>

<!-- find parent episode -->

<!-- find all titles a person is involved with -->

<!-- assess this individual's career -->

<!-- 5 what television show with more than 12 episodes has the highest rating? -->

### What Television Show with at least 12 episodes has the highest average rating?

This is really unsatisfactory:

| parentTconst | primaryTitle                          | average_rating_for_series |
|-------------------|-------------------------------|----------------------|
| tt0409579    | Made                                  | 10                        |
| tt11289784   | Unus Annus                            | 10                        |
| tt11363282   | The Real Housewives of Salt Lake City | 10                        |
| tt21278628   | Cowboys of Thunder                    | 10                        |
| tt0060008    | The Milton Berle Show                 | 9.9                       |
| tt0168358    | Parkinson                             | 9.9                       |
| tt0372654    | De película                           | 9.9                       |
| tt0491739    | In the Nick of Time                   | 9.9                       |
| tt14117438   | Tough Love with Hilary Farr           | 9.9                       |
| tt31806594   | War of Faith                          | 9.9                       |

: Data for TV Series and Their Average Ratings {.striped .hover}

Let's investigate the quantiles for number of votes:

![](images/mp-02/2_quantile_breakdown_of_num_of_votes.jpeg){style="width:75%; box-shadow: -1px 1px 2px rgba(0, 0, 0, 0.5); display: block; margin: auto;"}

Discounting the disotrting effect of few people voting on a television
program, we'll settle on the the top 10% most popular shows, Admittedly
this may miss out on underrecognized, cult programs.

| parentTconst | primaryTitle       | average_rating_for_series |
|--------------|--------------------|---------------------------|
| tt2560140    | Attack on Titan    | 9.02                      |
| tt0903747    | Breaking Bad       | 8.96                      |
| tt5753856    | Dark               | 8.89                      |
| tt4158110    | Mr. Robot          | 8.89                      |
| tt3322312    | Daredevil          | 8.84                      |
| tt1839578    | Person of Interest | 8.80                      |
| tt3032476    | Better Call Saul   | 8.80                      |
| tt7660850    | Succession         | 8.75                      |
| tt0944947    | Game of Thrones    | 8.75                      |
| tt3581920    | The Last of Us     | 8.73                      |

: I had never heard of Attack on Titan. The Internet loves Anime.
{.striped .hover}

<details>

<summary>\> show the code</summary>

``` r

# Group television shows by their parents
tv_show_12_episodes <- 
  TITLE_EPISODES |> 
  group_by(parentTconst) |>
  mutate(numberOfEpisodes = n()) |>  
  filter(numberOfEpisodes > 12) |>
  arrange(desc(numberOfEpisodes))

# Identify the popular series by averaging the ratings of all episodes
tv_show_12_episodes_high_rating_ID <- 
  tv_show_12_episodes |> 
  inner_join(TITLE_RATINGS, by = "tconst") |> 
  select(-seasonNumber, -episodeNumber, -tconst) |>
  group_by(parentTconst) |> 
  mutate(average_rating_for_series = mean(averageRating), total_votes = sum(numVotes))

# Join our working list with the master Title list to identify the series
tv_show_12_episodes_high_rating_ID |> 
  inner_join(TITLE_BASICS, join_by(parentTconst == tconst)) 
  
# Investigate the name of the most popular shows
tv_show_12_episodes_high_rating_titles <- 
  tv_show_12_episodes_high_rating_ID |> 
  inner_join(TITLE_BASICS, join_by(parentTconst == tconst)) |>
  group_by(parentTconst, primaryTitle) |>  
  summarize(average_rating_for_series = first(average_rating_for_series), .groups = 'drop') |>
  arrange(desc(average_rating_for_series))  
tv_show_12_episodes_high_rating_titles

# This yielded unsatisfactory, unidentifiable series, let's try to limit by quantile
quantile(tv_show_12_episodes_high_rating_ID$total_votes, prob = seq(0,1,.1))

# Graph used to visualize the quantiles
ggplot(quantile_data, aes(x = quantile, y = votes, fill = quantile)) + 
  geom_col() + 
  scale_fill_brewer(palette = "Set3") +  
  labs(title = "Quantile Breakdown of Number of Votes", 
       x = "Percentage of Shows Receiving Votes", 
       y = "Number of Votes") +
   scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
  theme_minimal() +
  theme(legend.position = "none",  plot.title = element_text(hjust = 0.5))  

# Investegating the top 10% of shows 
tv_show_12_episodes_high_rating_titles <- 
  tv_show_12_episodes_high_rating_ID |> 
  inner_join(TITLE_BASICS, join_by(parentTconst == tconst)) |>
  filter(total_votes > 327732) |>
  group_by(parentTconst, primaryTitle) |>  
  summarize(average_rating_for_series = first(average_rating_for_series), .groups = 'drop') |>
  arrange(desc(average_rating_for_series)) |>
  slice_max(order_by = average_rating_for_series, n = 10)
```

</details>

<!-- The TV series Happy Days (1974-1984) gives us the common idiom “jump the shark”. The phrase comes from a controversial fifth season episode (aired in 1977) in which a lead character literally jumped over a shark on water skis. Idiomatically, it is used to refer to the moment when a once-great show becomes ridiculous and rapidly looses quality. -->

### Jump the Shark with Happy Days

Wikipedia suggests the famous "jumping the shark" episode from Happy
Days happened episode `3` season `5`.

After we identify all the episdoes of Happy Days in our IMDb data we
create two sets of data filtered around the pivot point of season `5`
episode `3` : **before shark** and **after shark**.

Performing calculations on these two sets we see:

``` r
> mean(happy_days_episodes_ratings_before_shark$averageRating)
[1] 7.484404

> mean(happy_days_episodes_after_shark$averageRating)
[1] 6.878571
```

Happy Days did, in fact, jump its own proverbial shark.

<details>

<summary>\> show the code</summary>

``` r
# Identifying the IMDb ID for television series "Happy Days"
TITLE_BASICS |> 
  filter(titleType == "tvSeries" & primaryTitle == "Happy Days") 

# Singling out all "Happy Days" epsidoes in our titles dataset 
happy_days_episodes <- TITLE_EPISODES |> 
  filter(parentTconst == "tt0070992")

# Joining our "Happy Days" episodes with their ratings
happy_days_episodes_ratings <- happy_days_episodes |> 
  inner_join(TITLE_RATINGS, by = "tconst")

# Filtering on all episodes before the infamous "shark jump" episode of 
# Episode 3, Season 5
happy_days_episodes_ratings_before_shark <- happy_days_episodes_ratings |> 
  filter((seasonNumber < 5) | (seasonNumber == 5 & episodeNumber < 3)) 

# With our "before shark" episodes, using a filter join to create a data set
# for "after shark" 
happy_days_episodes_after_shark <- happy_days_episodes_ratings |>
  anti_join(happy_days_episodes_ratings_before_shark, by = "tconst") 

# With "before shark" and "after shark" data sets, we can perform our calculations
mean(happy_days_episodes_ratings_before_shark$averageRating)
mean(happy_days_episodes_after_shark$averageRating)
```

<details>

<!-- Season 5, episode 3 -->

## Beyond the Spotlight

We're going to use ratings in IMDb to create a measure to document the significant, successful films. IMDb ratings are crowdsources from its users.  Films with more votes are going to have more stable rating and there is a left skew to the distribution of films and the number of individuals who have rated the film: 
```
     0%     10%     20%     30%     40%     50%     60%     70%     80%     90% 
    100     120     148     187     246     332     473     738    1332    3355
```

I'm going to filter out the top `~20%` of rated films. 

In an attempt to single out noteworthy remaining films, I created a statistical
quantification of a movie's positioning by evaluating both its IMDb
rating and the number of IMDb users who voted on the film. This approach
aims to capture both the **quality** (via the rating) and the
**popularity** (via the number of votes) of the film.

To achieve this, I calculated **Z-scores** for both the film's rating
and its number of votes, which measure how far each value deviates from
the mean in terms of standard deviations. I then transformed these
Z-scores into **cumulative probabilities** using the `pnorm()` function,
which maps the Z-scores to probabilities between 0 and 1, effectively
scaling the values from 1 to 100. To emphasize quality, I assigned a
weight of 2 to the film's rating in the final combined score.

$$
\text{Total Score} = 2 \cdot \Phi(\text{rating score}) + \Phi(\text{votes score})
$$

**Here are the results for the top films**:

| Primary Title                                      | Start Year | Film Score |
|---------------------------------------------------|------------|------------|
| The Shawshank Redemption                          | 1994       | 99.97593   |
| The Godfather                                     | 1972       | 99.97335   |
| The Godfather Part II                             | 1974       | 99.96597   |
| Schindler's List                                  | 1993       | 99.96597   |
| The Lord of the Rings: The Return of the King     | 2003       | 99.96597   |
| The Dark Knight                                   | 2008       | 99.96597   |
| 12 Angry Men                                      | 1957       | 99.96597   |
| Pulp Fiction                                      | 1994       | 99.96070   |
| The Lord of the Rings: The Fellowship of the Ring | 2001       | 99.96070   |
| Forrest Gump                                      | 1994       | 99.95391   |

: Table: Top 10 Movies by Film Score {.striped .hover}

**Here are the results for the bottom films**:


| Primary Title                                     | Start Year | Film Score |
|---------------------------------------------------|------------|------------|
| Track of the Moon Beast                           | 1976       | 6.580106   |
| Boggy Creek II: And the Legend Continues          | 1983       | 6.577407   |
| Anne B. Real                                      | 2003       | 6.576749   |
| Kayhan                                            | 2018       | 6.576689   |
| Orgy of the Dead                                  | 1965       | 6.576307   |
| Amazing China                                     | 2018       | 6.575677   |
| Darling Nikki                                     | 2019       | 6.573956   |
| Alien Warfare                                     | 2019       | 6.572054   |
| Anus Magillicutty                                 | 2003       | 6.569317   |
| Hole in One                                       | 2009       | 6.564986   |

: Table: Movies with Low Film Scores {.striped .hover}


Movie Box Office is reported in several popular, widely available media outlets
and box office data is the type of low-stakes, hobby-friendly metrics
that Internet-curated resources like [Kaggle](https://www.kaggle.com/) are uniquely suited for. To check the box office returns of the Total Score
calculation, the [Kaggle Movies
Dataset](https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset)
was used for box office under the variable `revenue`.

However, films can span several decades and box office figures are not
as useless unless the numbers are controlled in constant dollars. To correct for this the following variable was added to our data:

$\text{Box Office Adjusted in 2024 Dollars} = \text{Box Office} \times \frac{\text{Consumer Price Index 2024}}{\text{Consumer Price Index Historical Year}}$

It's always interesting to view films ranked by adjust box office figures : 

| Primary Title                                    | Start Year| Adjusted Box Office      |
|--------------------------------------------------|-----------|--------------------------|
| Gone with the Wind                               | 1939      | $8,815,801,640           |
| Alice in Wonderland                              | 1951      | $6,945,453,701           |
| Bambi                                            | 1942      | $5,253,837,431           |
| Star Wars: Episode IV - A New Hope               | 1977      | $4,087,964,566           |
| Avatar                                           | 2009      | $4,072,386,147           |
| Snow White and the Seven Dwarfs                  | 1937      | $4,044,976,143           |
| Titanic                                          | 1997      | $3,576,617,908           |
| Cinderella                                       | 1950      | $3,459,407,380           |
| The Exorcist                                     | 1973      | $3,194,983,975           |
| The Sound of Music                               | 1965      | $2,829,274,085           |


: Table: Top 10 Movies by Adjusted Box Office in 2024 Dollars {.striped .hover}


Here now is our data with our box office figures. This table suggests Film Score identifies financially successful films: 


| Primary Title                                      | Start Year | Film Score | Adjusted Box Office   |
|---------------------------------------------------|------------|------------|-----------------------|
| The Shawshank Redemption                          | 1994       | 99.97593   | $59,787,899           |
| The Godfather                                     | 1972       | 99.97335   | $1,838,993,851        |
| The Godfather Part II                             | 1974       | 99.96597   | $314,657,090          |
| Schindler's List                                  | 1993       | 99.96597   | $695,053,325          |
| The Lord of the Rings: The Return of the King     | 2003       | 99.96597   | $1,899,198,581        |
| The Dark Knight                                   | 2008       | 99.96597   | $1,467,798,473        |
| 12 Angry Men                                      | 1957       | 99.96597   | $11,174,529           |
| Pulp Fiction                                      | 1994       | 99.96070   | $451,294,576          |
| The Lord of the Rings: The Fellowship of the Ring | 2001       | 99.96070   | $1,534,807,634        |
| Forrest Gump                                      | 1994       | 99.95391   | $1,430,163,380        |

: Table: Top 10 Movies by Film Score and Adjusted Box Office {.striped .hover}


While The Shawshank Redemption looks like a 
"failure" here, it famously more than made up for its lackluster Box Office returns in [DVD sales, cable television licensing and streaming agreements](https://www.slashfilm.com/1670564/the-shawshank-redemption-box-office-flop-30-years-ago/):

>"It's an incredible moneymaking asset that continues to resonate with viewers," said Jeff Baker, 
>the former executive vice president and general manager of Warner Bros. Home Entertainment 
>theatrical catalog, in that Wall Street Journal piece. "Shawshank" is one of the best performers 
>in the studio's library, in no small part thanks to strong DVD/Blu-ray sales, not to mention streaming

Does `Film Score` work in reverse? Does it correctly identify "bad" movies? 

Filtering for films that are in the top `80%` of movies voted on, and sorting on `film_score` yields some truly terrible films:

| Primary Title                                      | Start Year | Film Score | Adjusted Box Office |
|---------------------------------------------------|------------|------------|---------------------|
| The Starfighters                                  | 1964       | 6.541835   | $0                  |
| Final Justice                                     | 1984       | 6.547430   | $0                  |
| Time Chasers                                      | 1994       | 6.552881   | $0                  |
| Mega Shark vs. Mecha Shark                        | 2014       | 6.553869   | $0                  |
| Orgy of the Dead                                  | 1965       | 6.576307   | $0                  |
| Boggy Creek II: And the Legend Continues          | 1983       | 6.577407   | $0                  |
| Track of the Moon Beast                           | 1976       | 6.580106   | $0                  |
| Levottomat 3 - kun mikään ei riitä                | 2004       | 6.581920   | $0                  |
| The Blade Master                                  | 1983       | 6.583010   | $0                  |
| Girl in Gold Boots                                | 1968       | 6.585128   | $0                  |

: Table: Movies with Moderate Film Scores and Adjusted Box Office {.striped .hover}

How about examining a prominent director? Is there any direcor more prominent than Steven Spielberg? 
Querying for `film_score`, we find Steven Spielberg's films score : 

```r
[1] 88.5889
```

Even including *Indiana Jones and the Kingdom of the Crystal Skull (2008)*, *The BFG (2016)*, and *Always (1989)* Steven Spielberg films collectively average in the top `89%` of all films. `film_score` correctly identifies the most prominent talent in the industry.

How does another director compare to Steven Spielberg? 

Direcor Uwe Boll is famous for being a critically reviled filmmaker.  He's actually known as ["The Worst Director in the World"](https://www.vice.com/en/article/the-worst-director-in-the-world/). 

Does `film_score` correctly identify Uwe Boll's filmography as not-Spielbergian?  

It certainly does. Here is the collective `film_score` rating of all Uwe Boll films: 

```r
[1] 14.53452
```

To identify a `film_score` cut-off, I exported the data into a spread sheet for ease of viewing. I scrolled through the films assessing the quality of the neighboring films until I started to identify a good number of forgettable films. I used the entirely scientific process of scanning this list until I reached the point of "I really don't see many good films below this number." I found a fitting threshold with *Indiana Jones and the Kingdom of the Crystal Skull (2008)*. 

I'm going to settle on `77.46` as the `film_score` threshold dividing "good movie" from "bad movie":

![](images/mp-02/crystal-skull.jpg){style="width:75%; box-shadow: -1px 1px 2px rgba(0, 0, 0, 0.5); display: block; margin: auto;"}


<details>
<summary>\> show the code</summary>

``` r
# Surveying the distriubtion of films by number of votes
quantile(TITLE_RATINGS$numVotes, probs=seq(0,1,0.05))

# Filtering those films accordingly 
filtered_title_ratings <- TITLE_RATINGS |> 
  filter(numVotes > 3335)



# Finding the standard deviations and mean for ratings and votes
SD_RATING <- sd(filtered_title_ratings$averageRating)
MEAN_RATING <- mean(filtered_title_ratings$averageRating)
SD_VOTES <- sd(filtered_title_ratings$numVotes)
MEAN_VOTES <-mean(filtered_title_ratings$numVotes)

# Calculating the cumulative probabilities for ratings and votes 
# and created total_score metric
films_scores <- filtered_title_ratings |> 
  inner_join(TITLE_BASICS, by = "tconst") |> 
  filter(titleType == "movie") |>
  mutate(
    rating_score = pnorm((averageRating - MEAN_RATING) / SD_RATING),
    votes_score = pnorm((numVotes - MEAN_VOTES) / SD_VOTES)
  ) |>
  mutate(total_score = 2 * rating_score + votes_score) |>
  arrange(desc(total_score)) 


# Re-calculating the standard deviations for total_score
SD_SCORE <- sd(films_scores$total_score)
MEAN_SCORE <- mean(films_scores$total_score)

# Converting total_score to film_score via cumulative probabilities
films_scores <- films_scores |> 
  mutate(film_score = pnorm((total_score - MEAN_SCORE) / SD_SCORE) * 100) |> 
  arrange(desc(film_score)) 

# Checking if film_score identifies good films
films_scores |> 
  head(films_scores, 10) |>
  select(primaryTitle, startYear, film_score)

# Checking if film_score identifies bad films
films_scores |> 
  tail(films_scores, 10) |>
  select(primaryTitle, startYear, film_score)

##### CONSUMER PRICE INDEX CALCULATIONS #####

# Reading the historical CPI figure for each year
HISTORICAL_CPI <- read.csv("data/mp02/HISTORICAL_CPI.csv") |>
   mutate(year = substring(DATE,1,4))

# Create a named vector for CPI figures for each year
cpi_named_vector <- setNames(HISTORICAL_CPI$CPIAUCNS, HISTORICAL_CPI$year)

# Function for calculating a dollar figure by 2024 dollars
get_dollar_adjusted_value <- function(budget, year){
  return (budget * cpi_named_vector[as.character(2024)]/cpi_named_vector[as.character(year)]) 

#############################################
  
# Add adjusted_box_office figure now with CPI calculation
films_scores_box_office <- films_scores |>
  inner_join(KAGGLE_DATA, join_by(tconst == imdb_id)) |> 
  mutate(adjusted_box_office = get_dollar_adjusted_value(revenue, startYear))

# Surveying how good film_score is at documenting box office successes
films_scores_box_office |> 
  select(primaryTitle, startYear, film_score, adjusted_box_office ) |>
  arrange(desc(film_score)) |> 
  slice(1:10)

# Surveying how good film_score is at documenting box office failures
films_scores_box_office |> 
  select(primaryTitle, startYear, film_score)
  tail(films_scores, 10) |>
  
# Finding Steven Spielberg
ss_id <- NAME_BASICS |> 
  filter(primaryName == "Steven Spielberg") |> 
  pull(nconst)

# Identifying all Steven Spielberg films
ss_films <- TITLE_PRINCIPALS |> 
  filter(nconst == ss_id[1] & category == "director") |>
  pull(tconst)

# Calculating average score for all Steven Spielberg films
films_scores_box_office |>
  filter(tconst %in% ss_films) |>
  summarize(average_film_score = mean(film_score, na.rm = TRUE)) |>
  pull(average_film_score)

# Finding Uwe Boll
ub_id <- NAME_BASICS |> 
  filter(primaryName == "Uwe Boll") |> 
  pull(nconst)

# Identifying all Uwe Boll films
ub_films <- TITLE_PRINCIPALS |> 
  filter(nconst == ub_id[1] & category == "director") |>
  pull(tconst)

# Calculating the average score for all Uwe Boll films
films_scores_box_office |>
  filter(tconst %in% ub_films) |>
  summarize(average_film_score = mean(film_score, na.rm = TRUE)) |>
  pull(average_film_score)

# Data Frame exported for analysis 
df_csv <- films_scores_box_office |>
  select(primaryTitle, startYear, film_score, adjusted_box_office)

# Export a .csv for viewing
write.csv(df_csv, "films_scores_box_office.csv", row.names = FALSE)

```

</details>

## Best in Decade

Assessing the popularity of film genres across decades yields interesting insight into American Culture. 

![](images/mp-02/genre-popularity-with-independent-films.jpeg){}

We can see `Western` indeed being a forgotten genre, falling out of favor by the time of the `1970`s and `1980`s. Same with `War`, likely a reflection of the fading legacy of America's triumphant relationship with World War II. And for the horniest segment of this project, this chart does indeed document the famed Adult Entertainment Film Production Heyday of the `1970`s and `1980`s.  

The existence of `Comedy` and `Drama` is pretty steady in this data. What if we were to?:  

1. Remove all `Comedy` and `Drama` films 
2. Remove all independent or films that did not gross any revenue

<!-- ![This is a caption with an aligned image.](path/to/image.png){fig-cap="This is a caption for the image." width="50%" align="center"} -->


<!-- ![Hello How are you?](images/mp-02/genre-popularity-without-comedy-drama.jpeg){style="width:75%; box-shadow: -1px 1px 2px rgba(0, 0, 0, 0.5); padding: 5px; display: block; margin: auto;"} -->
![](images/mp-02/genre-popularity-without-comedy-drama.jpeg){fig-cap="Hello how are you"}  


This yields an edifying chart as it more visably identifies the rise and fall of genre trends - with the understanding `Comedy` and `Drama` are longstanding genres that are unlikely to fall out of favor anytime soon. 

![Bureau of Labor Statistics](images/mp-02/wages-by-gender.jpeg){}

<details> 
<summary>\> show the code</summary>
```r
slim_title_basics <- TITLE_BASICS |> 
  filter(startYear > 1940 & titleType == "movie") |> 
  select(tconst, primaryTitle, startYear, genres, titleType) |> 
  separate_rows(genres, sep = ",") |> 
    filter(!(genres %in% c("Music","Musical", "Reality-TV", "News","\\N", "Talk-Show", "Film-Noir","Game-Show",  "History","Biography", "Crime", "Sport"))) |>
  mutate(startYear = as.numeric(startYear), 
         decade = floor(startYear / 10) * 10,
         decade = factor(decade, levels = sort(unique(floor(as.numeric(startYear) / 10) * 10))))

genre_count_by_decade <- slim_title_basics |>
  group_by(decade, genres) |>
  summarize(genre_count = n(), .groups = 'drop')

ggplot(genre_count_by_decade, aes(x = decade, y = genre_count, fill = genres)) +
  geom_bar(stat = "identity", position = "fill", color = "black") +
  scale_y_continuous(labels = scales::percent) +  # Makes the y-axis percentages
  labs(y = "Percentage", x = "Decade", fill = "Genres", title = "Genre Popularity by Decade",
  subtitle = "With Independent Films") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),           
        plot.subtitle = element_text(hjust = 0.5))

slim_title <- films_scores |> 
  filter(startYear > 1940 & titleType == "movie") |> 
  select(tconst, primaryTitle, startYear, genres, titleType) |> 
  separate_rows(genres, sep = ",") |> 
    filter(!(genres %in% c("Music","Musical", "Reality-TV", "News","\\N", "Talk-Show", "Film-Noir","Game-Show",  "History","Biography", "Crime", "Sport"))) |>
  mutate(startYear = as.numeric(startYear), 
         decade = floor(startYear / 10) * 10,
         decade = factor(decade, levels = sort(unique(floor(as.numeric(startYear) / 10) * 10))))

genre_count_by_decade <- slim_title |>
  group_by(decade, genres) |>
  summarize(genre_count = n(), .groups = 'drop')

ggplot(genre_count_by_decade, aes(x = decade, y = genre_count, fill = genres)) +
  geom_bar(stat = "identity", position = "fill", color = "black") +
  scale_y_continuous(labels = scales::percent) +  # Makes the y-axis percentages
  labs(y = "Percentage", x = "Decade", fill = "Genres", title = "Genre Popularity by Decade",
  subtitle = "Without Independent Films") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),           
        plot.subtitle = element_text(hjust = 0.5))
  
slim_title_no_comedy_no_drama <- films_scores |> 
  filter(startYear > 1940 & titleType == "movie") |> 
  select(tconst, primaryTitle, startYear, genres, titleType) |> 
  separate_rows(genres, sep = ",") |> 
    filter(!(genres %in% c("Music","Musical","Comedy", "Drama", "Reality-TV", "News","\\N", "Talk-Show", "Film-Noir","Game-Show",  "History","Biography", "Crime", "Sport"))) |>
  mutate(startYear = as.numeric(startYear), 
         decade = floor(startYear / 10) * 10,
         decade = factor(decade, levels = sort(unique(floor(as.numeric(startYear) / 10) * 10))))

genre_count_by_decade_no_comedy <- slim_title_no_comedy_no_drama |>
  group_by(decade, genres) |>
  summarize(genre_count = n(), .groups = 'drop')

ggplot(genre_count_by_decade_no_comedy, aes(x = decade, y = genre_count, fill = genres)) +
  geom_bar(stat = "identity", position = "fill", color = "black") +
  scale_y_continuous(labels = scales::percent) + 
  labs(y = "Percentage", x = "Decade", fill = "Genres", title = "Genre Popularity by Decade", subtitle = "Without Independent films or Comedy or Drama") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),           
        plot.subtitle = element_text(hjust = 0.5))
        
wages <- read.csv("data/mp02/wages.csv")
wages$Men <- as.numeric(gsub(",", "", wages$Men))
wages$Women <- as.numeric(gsub(",", "", wages$Women))
wages <- wages[-nrow(wages), ]

ggplot(wages, aes(x=X)) +
  geom_line(aes(y = Women, color = "Women"), size = 1.2) +
  geom_line(aes(y = Men, color = "Men"), linetype = "twodash", size = 1.2) +
  geom_smooth(aes(y = Women), method = "lm", se = FALSE, color="black", linetype = "dashed", size = .2) +
  geom_smooth(aes(y = Men), method = "lm", se = FALSE, color="black", linetype = "dashed", size = .2) +
  labs(y = "Weekly Wages", x = "Decade", title = "40 Year Trend in Wages by Gender", color="Gender") +
  scale_y_continuous(labels = dollar_format()) + 
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) 


<!-- genre_count_by_decade_no_comedy |> finish for romance trend -->
  
```
</details>

Here is an image detailing gender disparities in Hollywood.

![](images/mp-02/movie_count_film_score_gender.jpeg){}



Here is me looking for actors who have been in prominent films. The top 2 look like a great choice! 

| Primary Name        | Category | Age | Movie Count |
|---------------------|----------|-----|-------------|
| Scarlett Johansson  | Actress  | 40  | 35          |
| Jake Gyllenhaal     | Actor    | 44  | 23          |
| Chris Evans         | Actor    | 43  | 20          |
| Seth Rogen          | Actor    | 42  | 17          |
| Chris Hemsworth     | Actor    | 41  | 16          |
| Emma Stone          | Actress  | 36  | 16          |
| Natalie Portman     | Actress  | 43  | 15          |
| Chris Pratt         | Actor    | 45  | 15          |
| Rajkummar Rao       | Actor    | 40  | 15          |
| Kirsten Dunst       | Actress  | 42  | 14          |

: Table: Actors and Actresses by Age and Movie Count {.striped .hover}



Top Women Directors: 

| Primary Name              | Category  | Age | Movie Count |
|---------------------------|-----------|-----|-------------|
| Lilly Wachowski            | Director  | 57  | 5           |
| Lana Wachowski             | Director  | 59  | 5           |
| Zoya Akhtar                | Director  | 52  | 2           |
| Joan Chen                  | Director  | 63  | 1           |
| Gail Mancuso               | Director  | 66  | 1           |
| Mary Elizabeth McGlynn     | Director  | 58  | 1           |
| Jessie Nelson              | Director  | NA  | 1           |
| Maria Schrader             | Director  | 59  | 1           |
| Reema Kagti                | Director  | NA  | 1           |
| Olivia Wilde               | Director  | 40  | 1           |

: Table: Top Women Directors by Movie Count {.striped .hover}



Jordan Peele looks like a great choice... 

| Primary Name          | Category  | Age | Movie Count |
|-----------------------|-----------|-----|-------------|
| Benny Safdie           | Director  | 38  | 2           |
| John Francis Daley     | Director  | 39  | 2           |
| Olivia Wilde           | Director  | 40  | 1           |
| Seth Rogen             | Director  | 42  | 2           |
| Evan Goldberg          | Director  | 42  | 2           |
| Joseph Gordon-Levitt   | Director  | 43  | 1           |
| Fran Kranz             | Director  | 43  | 1           |
| Jordan Peele           | Director  | 45  | 3           |
| John Krasinski         | Director  | 45  | 2           |
| Mert Baykal            | Director  | 45  | 1           |

: Table: Directors by Age and Movie Count {.striped .hover}


<details>
<summary>\> show the code</summary>


```r
top_movies <- films_scores |>
  filter(film_score > 77.46)



talent <- TITLE_PRINCIPALS |>
  filter(tconst %in% top_movies$tconst, category %in% c("actor", "actress", "director")) |>
  inner_join(names_in_many_big_productions, by = "nconst") |>
  inner_join(films_scores, by = "tconst") |>
  group_by(nconst, primaryName, category, age) |>
  summarize(movie_count = n()) |>
  arrange(desc(movie_count))

talent_again <- TITLE_PRINCIPALS |>
  filter(tconst %in% top_movies$tconst, category %in% c("actor", "actress", "director")) |>
  inner_join(names_in_many_big_productions, by = "nconst") |>
  inner_join(films_scores, by = "tconst") |>
  group_by(nconst, primaryName, category, age) |>
  summarize(movie_count = n(), mean_film_score = mean(film_score, na.rm = TRUE)) |>
  arrange(desc(movie_count))


top_actors <- talent_again |>
  filter(category %in% c("actor", "actress"), age >= 20 & age <= 45 & movie_count > 4) |>
  arrange(desc(mean_film_score))

actors_summary <- top_actors |> 
  group_by(category) |> 
  summarize(total_movie = sum(movie_count), number_of_performers = n(), score = mean(mean_film_score))

glimpse(top_actors)

ggplot(top_actors, aes(x = mean_film_score, fill = category)) +
  geom_density(alpha = 0.6) +
  labs(title = "Density of Mean Film Scores by Gender", x = "Mean Film Score", y = "Density") +
  theme_minimal()
  
ggplot(top_actors, aes(x = movie_count, y = mean_film_score, color = category)) +
  geom_point(alpha = 0.5, size = 3) +
  labs(title = "Movie Count vs. Mean Film Score by Gender", x = "Movie Count", y = "Mean Film Score", color = NULL) +  
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) 

top_directors <- talent |> 
  filter(category == "director") 

top_directors |> 
  arrange(age, desc(movie_count)) |>
  head(20)

```
</details>

Witness jumps out at me here :

| Title                       | Year  | Film Score  |
|-----------------------------|------|------------|
| Vertigo                     | 1958 | 99.68      |
| The Handmaiden              | 2016 | 99.20      |
| Match Point                 | 2005 | 97.93      |
| Roja                        | 1992 | 92.96      |
| Witness                     | 1985 | 92.05      |
| The Wind                    | 1928 | 91.02      |
| Spark: L.I.F.E.             | 2023 | 90.81      |
| A Story from Chikamatsu     | 1954 | 90.76      |
| To Catch a Thief            | 1955 | 89.51      |
| Vaalee                      | 1999 | 89.06      |

: Table: Films by Year and Film Score {.striped .hover}

Cast Lukas Haas as the villain. 

![](images/mp-02/witness.jpg){style="display: block; margin:auto; width:65%"}

<details>


<summary>\> show me the code</summary>

```r
# Searching for all Romance Thrillers
romance_thrillers <- TITLE_BASICS |>
  filter(titleType == "movie") |>  
  filter(grepl("Romance", genres) & grepl("Thriller", genres)) |>
  inner_join(films_scores, by = "tconst") |>
  filter(film_score > 77.46) |>
  select(primaryTitle.x, startYear.x, film_score) |>
  arrange(desc(film_score))
  
# This yields 19 films, lets investigate them
head(romance_thrillers, 19)

# Has Witness been remade? 
witness_films <- TITLE_BASICS |> 
  filter(titleType == "movie" & primaryTitle == "Witness" ) 
  
# There is another Witness in the dataset, but it's an unrelated film from India
head(witness_films) 


```
</details>


<!-- ##  -->
<!-- polarizing_films \<- movie_lens_and_IMDb \|\> group_by(IMDbId, -->
<!-- primaryTitle, startYear, genres) \|\> summarise(mean_rating = -->
<!-- mean(rating), sd_rating = sd(rating), num_ratings = n()) \|\> -->
<!-- arrange(desc(sd_rating)) \|\> select(-IMDbId) -->

<!-- polarizing_films -->

<!-- polarizing_films \<- movie_lens_and_IMDb \|\> group_by(movieId, -->
<!-- primaryTitle, startYear, genres) \|\> summarise(mean_rating = -->
<!-- mean(rating), iqr_rating = IQR(rating), num_ratings = n()) \|\> -->
<!-- arrange(desc(iqr_rating)) -->

<!-- polarizing_films \<- movie_lens_and_IMDb \|\> group_by(movieId, -->
<!-- primaryTitle, startYear, genres) \|\> summarise(mean_rating = -->
<!-- mean(rating), var_rating = var(rating), num_ratings = n()) \|\> -->
<!-- arrange(desc(var_rating)) -->

<!-- <!-- KAGGLE --> -->

<!-- movie_lens_and_IMDb_and_kaggle \<- movie_lens_and_IMDb \|\> -->
<!-- inner_join(KAGGLE_DATA, join_by(tconst == IMDb_id)) -->

<!-- movie_lens_and_IMDb_and_kaggle -->

<!-- get_dollar_adjusted_value \<- function(budget, year){ return (budget \* -->
<!-- cpi_named_vector\[as.character(2024)\]/cpi_named_vector\[as.character(year)\]) -->
<!-- } -->

<!-- votes_budget \<- movie_lens_and_IMDb_and_kaggle \|\> group_by(IMDbId, -->
<!-- primaryTitle, budget, startYear, revenue) \|\> summarize(num_votes = -->
<!-- n()) \|\> mutate(adjusted_budget = get_dollar_adjusted_value(budget, -->
<!-- startYear), adjusted_profit = get_dollar_adjusted_value(revenue, -->
<!-- startYear) - get_dollar_adjusted_value(budget, startYear) ) -->

<!-- model_profit \<- -->
<!-- lm(votes_budget$num_votes ~  votes_budget$adjusted_profit) -->

<!-- reg_line \<- function(x_val, model){ return(coef(model)\[1\] + -->
<!-- coef(model)\[2\] \* x_val) } -->

<!-- votes_budget_profit \<- votes_budget \|\> mutate(popularity_over_profit -->
<!-- = num_votes - reg_line(adjusted_profit, model_profit)) \|\> -->
<!-- arrange(desc(popularity_over_profit)) -->

<!-- <!-- why not working? --> -->

<!-- ggplot(data = votes_budget_profit, aes(x = adjusted_profit, y = -->
<!-- num_votes )) + geom_point(alpha = 0.1) + geom_smooth(method="lm", -->
<!-- se=FALSE) -->

<!-- model_budget \<- -->
<!-- lm(votes_budget$num_votes ~  votes_budget$adjusted_budget) -->

<!-- votes_budget_budget \<- votes_budget \|\> mutate(popularity_over_budget -->
<!-- = num_votes - reg_line(adjusted_budget, model_profit)) \|\> -->
<!-- arrange(desc(popularity_over_budget)) -->

<!-- print(votes_budget_budget, n =100) -->

<!-- <!-- expensive films --> -->

<!-- votes_budget \|\> arrange(desc(adjusted_budget)) \|\> print(n = 100) -->

<!-- top_500_polarizing_films \<- head(polarizing_films, 500) -->

<!-- top_500_polarizing_films_w_budget \<- top_500_polarizing_films \|\> -->
<!-- inner_join(KAGGLE_DATA, join_by(IMDbId == IMDb_id)) -->

<!-- top_500_polarizing_films_w_budget -->

## Appendix A {#appendixA}

### How Data Was Loaded

In this section, I describe how the data was loaded into the project.

``` r
<!-- library(dplyr) -->
<!-- library(tidyr) -->
<!-- library(stringr) -->
<!-- library(lubridate) -->
<!-- library(readr) -->

<!-- DATA_FOLDER <- "data/mp02/" -->

<!-- get_IMDb_file <- function(fname){ -->
<!--      as.data.frame(readr::read_csv(fname, lazy=FALSE)) -->
<!--  } -->

<!-- create_file_ext <- function(fname){ -->
<!--    paste0(DATA_FOLDER, fname) -->
<!-- } -->

<!-- # IMDb DATA -->

<!-- NAME_BASICS <- get_IMDb_file(create_file_ext("NAME_BASICS.csv")) -->
<!-- TITLE_RATINGS <- get_IMDb_file(create_file_ext("TITLE_RATINGS.csv")) -->
<!-- TITLE_BASICS <- get_IMDb_file(create_file_ext("TITLE_BASICS.csv")) -->
<!-- TITLE_CREW <- get_IMDb_file(create_file_ext("TITLE_CREW.csv")) -->
<!-- TITLE_EPISODES <- get_IMDb_file(create_file_ext("TITLE_EPISODES.csv")) -->
<!-- TITLE_PRINCIPALS <- get_IMDb_file(create_file_ext("TITLE_PRINCIPALS.csv")) -->

<!-- NAME_BASICS <- NAME_BASICS |> -->
<!--     mutate(birthYear = as.numeric(birthYear), -->
<!--            deathYear = as.numeric(deathYear)) -->

<!-- TITLE_RATINGS <- TITLE_RATINGS |> -->
<!--      mutate(averageRating = as.numeric(averageRating), -->
<!--             numVotes = as.numeric(numVotes)) -->

<!-- TITLE_BASICS <- TITLE_BASICS |> -->
<!--     mutate(isAdult = as.logical(isAdult), -->
<!--            runtimeMinutes = ifelse(grepl("[^0-9]", runtimeMinutes), NA, as.numeric(runtimeMinutes))) -->

<!-- # MOVIE LENS -->

<!-- MOVIE_LENS_RATINGS <- read.csv("data/mp02/ml-32m/ratings.csv") -->

<!-- MOVIE_LENS_LINKS <- read.csv("data/mp02/ml-32m/links.csv") -->

<!-- movie_lens_ratings_merged <- MOVIE_LENS_RATINGS |> -->
<!--    group_by(movieId) |> -->
<!--    summarize(count_reviews = n()) -->

<!-- # KAGGLE -->

<!-- KAGGLE_DATA <- read.csv("data/mp02/KAGGLE_DATA.csv") |> -->
<!--    mutate(budget = ifelse(is.na(budget), 0, parse_number(budget))) -->

<!-- # CPI -->

<!-- HISTORICAL_CPI <- read.csv("data/mp02/HISTORICAL_CPI.csv") |> -->
<!--    mutate(year = substring(DATE,1,4)) -->

<!-- cpi_named_vector <- setNames(HISTORICAL_CPI$CPIAUCNS, HISTORICAL_CPI$year) -->
```

head(names_in_many_big_productions)
<!-- quantile(movies_with_ratings_merged$count_reviews, probs=seq(0,1, by = 0.025)) -->
<!-- 95% of reviews have 1000 reviews or less... -->

<!-- max(movies_with_ratings_merged$movieId) -->

<!-- 292757 -->

<!-- MOVIE LENS -->

<!-- movies_meeting_review_threshold \<- movies_lens_ratings_merged \|\> -->
<!-- filter(count_reviews \>= 1000) \|\> pull(movieId) -->

<!-- filtered_reviews \<- MOVIE_LENS_RATINGS \|\> filter(movieId %in% -->
<!-- movies_meeting_review_threshold) -->

<!-- movie_lens\_\_IMDb \<- filtered_reviews \|\> -->
<!-- inner_join(MOVIE_LENS_LINKS, by = "movieId") -->

<details>

<summary>\> show the code</summary>

```{r}
hello <- "hello"

```

</details>

<!-- <!-- number of movies --> -->

<!-- When we say "movie" we often think of "what is opening this Friday" and -->
<!-- with it: "what film will win the weekend box office?" -->

<!-- If we look at the Kaggle Movie Dataset, we see -->

<!-- quantile(KAGGLE_DATA\$revenue, probs = seq(0,1,.05), na.rm=TRUE) -->

<!-- ![](images/mp-02/1_media_types_counts.jpeg){style="width:75%; box-shadow: -1px 1px 2px rgba(0, 0, 0, 0.5); display: block; margin: auto;"} -->

<!-- Seminal podcaster Bill Simmon’s (a man [paid 200 million dollars to -->
<!-- podcast](https://variety.com/2020/digital/news/spotify-acquires-the-ringer-196-million-cash-bill-simmons-1203502471/)) -->
<!-- has argued on his #1 film podcast [The -->
<!-- Re-Watchables](https://www.theringer.com/the-rewatchables) that the -->
<!-- Oscars should be awarded 5 years after a film’s release. Time-and-time -->
<!-- again, the Academy of Motion Picture and Science awards its most -->
<!-- prestigious award to a questionable film that years after leaves -->
<!-- audiences scratching their heads over the decision. This is likely due -->
<!-- to the impossibilty of fully evaluating a work of art until time finally -->
<!-- settles and properly establishes a film's legacy. All-too-often: -->
<!-- out-sized marketing budgets, capricious cultural fads or unrecognized -->
<!-- behind-the-camera politics are what grants a film the industry's most -->
<!-- coveted honor. -->

<!-- Do the Right Thing (1989), Saving Private Ryan (1997), Brokeback -->
<!-- Mountain (2005) and The Social Network (2010) are all classic examples -->
<!-- of the essential films of their respective years, egregiously -->
<!-- unrecognized by the academy. -->

<!-- Thus, Simmons argues we should establish "The 5 Year Oscars." The awards -->
<!-- should not be awarded until 5 years prior to a film's initial release. -->

<!-- (Television netowrk ABC, longtime broadcast home to the Oscars -->
<!-- broadcast, would likely not be thrilled with the decision to not embrace -->
<!-- movie-stars-of-the-moment in the ceremony.) -->

<!-- I'd like to extend this analysis to all films. If we ignore all film -->
<!-- reviews for a 5 year window, will we be left be able to recongize a -->
<!-- higher caliber or higher quality film? If we were to put film reviews -->
<!-- into a "5 year freezer", will it impact their rankings and perception? -->

<!-- Most importantly, will it hurt the score of objectively terrible movie -->
<!-- Crash (2005)? -->

<!-- This analysis is not possible with just IMDb data. For this analysis I -->
<!-- will need to bring in the data from review site [Movie -->
<!-- Lens](https://grouplens.org/datasets/movielens/). -->

Movie Lens offers a record for every review from each contributors - all
with a time-stamp for when the review was submitted. Movie Lens first
review was issued in `1995`. Thus, we can only properly evaluate films
from `2000 - 2019` (5 years after `1995` and 5 years prior to `2024`)
<!-- make sure TITLE_BASICS and working movie_lens data_set have similar IMDb IDs -->

title_basics_imdb_id \<- TITLE_BASICS \|\> mutate(IMDbId =
as.integer(substring(tconst, 3)), startYear = as.numeric(startYear))
\|\> filter(startYear \>= 1995 & startYear \<= 2019) \|\>
select(-runtimeMinutes, -isAdult, -titleType, -originalTitle, -endYear)

movie_lens_merge_imdb \<- title_basics_imdb_id \|\>
inner_join(MOVIE_LENS_RATINGS, by = c("IMDbId" = "movieId")) \|\>
mutate(yearReview = year(as.POSIXct(timestamp, origin="1970-01-01")))


five_year_reviews_after \<- movie_lens_merge_imdb \|\>
filter((yearReview - startYear) \>= 5) \|\> group_by(tconst) \|\>
summarize(after_5_year_score = mean(rating))

head(five_year_reviews_after)

five_year_reviews_before \<- movie_lens_imdb_filtered \|\>
filter(yearReview - startYear \< 5) \|\> group_by(tconst) \|\>
summarize(before_5_year_score = mean(rating))

head(movie_lens_imdb_filtered, 100)

movie_lens\_\_IMDb \<- filtered_reviews \|\>
inner_join(MOVIE_LENS_LINKS, by = "movieId")

head(title_basics_movie_lens_id)\
<!-- merge the two data sets, make sure to create a year for when the review was posted

movie_lens_and_IMDb \<- title_basics_movie_lens_id \|\>
inner_join(movie_lens_filtered_reviews_IMDb, by = "IMDbId") \|\>
select(-isAdult, -endYear, -runtimeMinutes, -tmdbId, -titleType) \|\>
mutate(yearReview = year(as.POSIXct(timestamp, origin="1970-01-01")))

<!-- now take out all reviews that were  -->

movie_lens_and_IMDb_5_year_reviews \<- movie_lens_and_IMDb \|\>
filter(yearReview - startYear \>= 5) \|\> group_by(IMDbId, primaryTitle,
startYear) \|\> summarize(avg_review = mean(rating)) \|\>
arrange(desc(avg_review))

print(movie_lens_and_IMDb_5_year_reviews, n=50)

movie_lens_and_IMDb_year_review \<- movie_lens_and_IMDb \|\>
group_by(IMDbId, primaryTitle, startYear) \|\> summarize(avg_review =
mean(rating)) \|\> arrange(desc(avg_review))

print(movie_lens_and_IMDb_year_review, n = 50)

