[
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Jason Amey Mini Project 01",
    "section": "",
    "text": "Public transit in the United States serves a critical role in urban mobility. Serving millions of commuters while reducing congestion, pollution, and reliance on personal vehicles, transit is a critical institution in the success of the United States.\nHowever there exists a wide variation in the fiscal efficiency of these systems. Understanding these financial dimensions is essential for evaluating both the sustainability and performance of transit services.\nThis report explores data from major U.S. public transit systems, with analysis focused on factors such as: fare revenue per mile, vehicle revenue miles (VRM), unlinked passenger trips (UPT), and the ratio of expenses to fare-box recovery.\nThe data thus provides insights into important components of tranist analysis including: which systems operate most efficiently, which modes of transport generate the most revenue, and how these metrics differ throughout the United States.\nUsing tools from the R programming language, we explore these trends over time along with the influence of population density, geography, and mode-type on a transit system’s financial outcomes. Through this exploration, we hope to better understand the complex relationship among transit usage, financial sustainability, and regional transit characteristics.\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nif(!require(\"stringr\")) install.packages(\"stringr\")\nlibrary(stringr)\n\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nlibrary(lubridate)\n\nFARES &lt;- readxl::read_xlsx(\"data/mp-01/2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`,\n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\nEXPENSES &lt;- readr::read_csv(\"data/mp-01/2022_expenses.csv\") |&gt;\n  select(`NTD ID`,\n         `Agency`,\n         `Total`,\n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nTRIPS &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`,\n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  rename(\n         \"mode\" = \"Mode\"\n  )\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(mode=case_when(\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"DR\" ~ \"Demand Response\",\n    mode == \"FB\" ~ \"Ferry Boat\",\n    mode == \"MB\" ~ \"Motor Bus\",\n    mode == \"SR\" ~ \"Streetcar\",\n    mode == \"TB\" ~ \"Trolleybus\",\n    mode == \"VP\" ~ \"Vanpool\",\n    mode == \"CB\" ~ \"Commuter Bus\",\n    mode == \"RB\" ~ \"Bus Rapid Transit\",\n    mode == \"LR\" ~ \"Light Rail\",\n    mode == \"YR\" ~ \"Hybrid Rail\",\n    mode == \"MG\" ~ \"Guided Transit (Monorail)\",\n    mode == \"CR\" ~ \"Commuter Rail\",\n    mode == \"AR\" ~ \"Alaska Railroad\",\n    mode == \"TR\" ~ \"Tramway\",\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"IP\" ~ \"Inclined Plane\",\n    mode == \"PB\" ~ \"Publico\",\n    mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))"
  },
  {
    "objectID": "mp01.html#fiscal-characteristics-of-major-us-public-transit-systems",
    "href": "mp01.html#fiscal-characteristics-of-major-us-public-transit-systems",
    "title": "Jason Amey Mini Project 01",
    "section": "",
    "text": "Public transit in the United States serves a critical role in urban mobility. Serving millions of commuters while reducing congestion, pollution, and reliance on personal vehicles, transit is a critical institution in the success of the United States.\nHowever there exists a wide variation in the fiscal efficiency of these systems. Understanding these financial dimensions is essential for evaluating both the sustainability and performance of transit services.\nThis report explores data from major U.S. public transit systems, with analysis focused on factors such as: fare revenue per mile, vehicle revenue miles (VRM), unlinked passenger trips (UPT), and the ratio of expenses to fare-box recovery.\nThe data thus provides insights into important components of tranist analysis including: which systems operate most efficiently, which modes of transport generate the most revenue, and how these metrics differ throughout the United States.\nUsing tools from the R programming language, we explore these trends over time along with the influence of population density, geography, and mode-type on a transit system’s financial outcomes. Through this exploration, we hope to better understand the complex relationship among transit usage, financial sustainability, and regional transit characteristics.\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nif(!require(\"stringr\")) install.packages(\"stringr\")\nlibrary(stringr)\n\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nlibrary(lubridate)\n\nFARES &lt;- readxl::read_xlsx(\"data/mp-01/2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`,\n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\nEXPENSES &lt;- readr::read_csv(\"data/mp-01/2022_expenses.csv\") |&gt;\n  select(`NTD ID`,\n         `Agency`,\n         `Total`,\n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nTRIPS &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`,\n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  rename(\n         \"mode\" = \"Mode\"\n  )\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(mode=case_when(\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"DR\" ~ \"Demand Response\",\n    mode == \"FB\" ~ \"Ferry Boat\",\n    mode == \"MB\" ~ \"Motor Bus\",\n    mode == \"SR\" ~ \"Streetcar\",\n    mode == \"TB\" ~ \"Trolleybus\",\n    mode == \"VP\" ~ \"Vanpool\",\n    mode == \"CB\" ~ \"Commuter Bus\",\n    mode == \"RB\" ~ \"Bus Rapid Transit\",\n    mode == \"LR\" ~ \"Light Rail\",\n    mode == \"YR\" ~ \"Hybrid Rail\",\n    mode == \"MG\" ~ \"Guided Transit (Monorail)\",\n    mode == \"CR\" ~ \"Commuter Rail\",\n    mode == \"AR\" ~ \"Alaska Railroad\",\n    mode == \"TR\" ~ \"Tramway\",\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"IP\" ~ \"Inclined Plane\",\n    mode == \"PB\" ~ \"Publico\",\n    mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))"
  },
  {
    "objectID": "miniprojects/mp01.html",
    "href": "miniprojects/mp01.html",
    "title": "Jason Amey Mini Project 01",
    "section": "",
    "text": "Public transit in the United States serves a critical role in urban mobility. Serving millions of commuters while reducing congestion, pollution, and reliance on personal vehicles, transit is a critical institution in the success of the United States.\nHowever there exists a wide variation in the fiscal efficiency of these systems. Understanding these financial dimensions is essential for evaluating both the sustainability and performance of transit services.\nThis report explores data from major U.S. public transit systems, with analysis focused on factors such as: fare revenue per mile, vehicle revenue miles (VRM), unlinked passenger trips (UPT), and the ratio of expenses to fare-box recovery.\nThe data thus provides insights into important components of tranist analysis including: which systems operate most efficiently, which modes of transport generate the most revenue, and how these metrics differ throughout the United States.\nUsing tools from the R programming language, we explore these trends over time along with the influence of population density, geography, and mode-type on a transit system’s financial outcomes. Through this exploration, we hope to better understand the complex relationship among transit usage, financial sustainability, and regional transit characteristics.\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nif(!require(\"stringr\")) install.packages(\"stringr\")\nlibrary(stringr)\n\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nlibrary(lubridate)\n\nFARES &lt;- readxl::read_xlsx(\"data/mp-01/2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`,\n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\nEXPENSES &lt;- readr::read_csv(\"data/mp-01/2022_expenses.csv\") |&gt;\n  select(`NTD ID`,\n         `Agency`,\n         `Total`,\n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nTRIPS &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`,\n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  rename(\n         \"mode\" = \"Mode\"\n  )\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(mode=case_when(\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"DR\" ~ \"Demand Response\",\n    mode == \"FB\" ~ \"Ferry Boat\",\n    mode == \"MB\" ~ \"Motor Bus\",\n    mode == \"SR\" ~ \"Streetcar\",\n    mode == \"TB\" ~ \"Trolleybus\",\n    mode == \"VP\" ~ \"Vanpool\",\n    mode == \"CB\" ~ \"Commuter Bus\",\n    mode == \"RB\" ~ \"Bus Rapid Transit\",\n    mode == \"LR\" ~ \"Light Rail\",\n    mode == \"YR\" ~ \"Hybrid Rail\",\n    mode == \"MG\" ~ \"Guided Transit (Monorail)\",\n    mode == \"CR\" ~ \"Commuter Rail\",\n    mode == \"AR\" ~ \"Alaska Railroad\",\n    mode == \"TR\" ~ \"Tramway\",\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"IP\" ~ \"Inclined Plane\",\n    mode == \"PB\" ~ \"Publico\",\n    mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))"
  },
  {
    "objectID": "miniprojects/mp01.html#fiscal-characteristics-of-major-us-public-transit-systems",
    "href": "miniprojects/mp01.html#fiscal-characteristics-of-major-us-public-transit-systems",
    "title": "Jason Amey Mini Project 01",
    "section": "",
    "text": "Public transit in the United States serves a critical role in urban mobility. Serving millions of commuters while reducing congestion, pollution, and reliance on personal vehicles, transit is a critical institution in the success of the United States.\nHowever there exists a wide variation in the fiscal efficiency of these systems. Understanding these financial dimensions is essential for evaluating both the sustainability and performance of transit services.\nThis report explores data from major U.S. public transit systems, with analysis focused on factors such as: fare revenue per mile, vehicle revenue miles (VRM), unlinked passenger trips (UPT), and the ratio of expenses to fare-box recovery.\nThe data thus provides insights into important components of tranist analysis including: which systems operate most efficiently, which modes of transport generate the most revenue, and how these metrics differ throughout the United States.\nUsing tools from the R programming language, we explore these trends over time along with the influence of population density, geography, and mode-type on a transit system’s financial outcomes. Through this exploration, we hope to better understand the complex relationship among transit usage, financial sustainability, and regional transit characteristics.\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nif(!require(\"stringr\")) install.packages(\"stringr\")\nlibrary(stringr)\n\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nlibrary(lubridate)\n\nFARES &lt;- readxl::read_xlsx(\"data/mp-01/2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`,\n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\nEXPENSES &lt;- readr::read_csv(\"data/mp-01/2022_expenses.csv\") |&gt;\n  select(`NTD ID`,\n         `Agency`,\n         `Total`,\n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nTRIPS &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"data/mp-01/2022_ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`,\n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  rename(\n         \"mode\" = \"Mode\"\n  )\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(mode=case_when(\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"DR\" ~ \"Demand Response\",\n    mode == \"FB\" ~ \"Ferry Boat\",\n    mode == \"MB\" ~ \"Motor Bus\",\n    mode == \"SR\" ~ \"Streetcar\",\n    mode == \"TB\" ~ \"Trolleybus\",\n    mode == \"VP\" ~ \"Vanpool\",\n    mode == \"CB\" ~ \"Commuter Bus\",\n    mode == \"RB\" ~ \"Bus Rapid Transit\",\n    mode == \"LR\" ~ \"Light Rail\",\n    mode == \"YR\" ~ \"Hybrid Rail\",\n    mode == \"MG\" ~ \"Guided Transit (Monorail)\",\n    mode == \"CR\" ~ \"Commuter Rail\",\n    mode == \"AR\" ~ \"Alaska Railroad\",\n    mode == \"TR\" ~ \"Tramway\",\n    mode == \"HR\" ~ \"Heavy Rail\",\n    mode == \"IP\" ~ \"Inclined Plane\",\n    mode == \"PB\" ~ \"Publico\",\n    mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))"
  },
  {
    "objectID": "miniprojects.html",
    "href": "miniprojects.html",
    "title": "STA 9750 Fall 2024 - Jason Amey",
    "section": "",
    "text": "Here are my Mini-Projects :\n\nMini-Project #01"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jason Amey - STA 9750 Fall 2024",
    "section": "",
    "text": "About Me: I work professionally as a Business Librarian in the Newman Library at Baruch College in New York City, NY.\nHere is my: Github\n\n\n1.mp #01"
  },
  {
    "objectID": "index.html#hi-my-name-is-jason-amey",
    "href": "index.html#hi-my-name-is-jason-amey",
    "title": "Jason Amey - STA 9750 Fall 2024",
    "section": "",
    "text": "About Me: I work professionally as a Business Librarian in the Newman Library at Baruch College in New York City, NY.\nHere is my: Github\n\n\n1.mp #01"
  },
  {
    "objectID": "slides/final_project_presentation.html#the-update",
    "href": "slides/final_project_presentation.html#the-update",
    "title": "Final Project Presentation",
    "section": "The Update",
    "text": "The Update"
  },
  {
    "objectID": "final_project_presentation.html#is-there-a-relationship-between-streets-and-home-values",
    "href": "final_project_presentation.html#is-there-a-relationship-between-streets-and-home-values",
    "title": "STA 9750 Final Project Presentation",
    "section": "Is there a relationship between streets and home values?",
    "text": "Is there a relationship between streets and home values?"
  },
  {
    "objectID": "final_project_presentation.html#do-streets-with-less-traffic-and-traffic-violence-increase-property-values",
    "href": "final_project_presentation.html#do-streets-with-less-traffic-and-traffic-violence-increase-property-values",
    "title": "STA 9750 Final Project Presentation",
    "section": "Do streets with less traffic and traffic violence increase property values?",
    "text": "Do streets with less traffic and traffic violence increase property values?"
  },
  {
    "objectID": "final_project_presentation.html#there-is-no-singular-identification-of-nyc-street-transformations",
    "href": "final_project_presentation.html#there-is-no-singular-identification-of-nyc-street-transformations",
    "title": "STA 9750 Final Project Presentation",
    "section": "There is no singular identification of NYC street transformations",
    "text": "There is no singular identification of NYC street transformations"
  },
  {
    "objectID": "final_project_presentation.html#identifying-significant-traffic-calming-projects-in-local-media",
    "href": "final_project_presentation.html#identifying-significant-traffic-calming-projects-in-local-media",
    "title": "STA 9750 Final Project Presentation",
    "section": "Identifying significant traffic calming projects in local media",
    "text": "Identifying significant traffic calming projects in local media"
  },
  {
    "objectID": "final_project_presentation.html#media-coverage-as-a-signal-for-significant-traffic-calming-project",
    "href": "final_project_presentation.html#media-coverage-as-a-signal-for-significant-traffic-calming-project",
    "title": "STA 9750 Final Project Presentation",
    "section": "Media Coverage as a signal for “significant traffic calming project”",
    "text": "Media Coverage as a signal for “significant traffic calming project”"
  },
  {
    "objectID": "final_project_presentation.html#parse-text-from-html-and-rank-tokens-in-search-of-street-names",
    "href": "final_project_presentation.html#parse-text-from-html-and-rank-tokens-in-search-of-street-names",
    "title": "STA 9750 Final Project Presentation",
    "section": "Parse text from html and rank tokens in search of street names",
    "text": "Parse text from html and rank tokens in search of street names"
  },
  {
    "objectID": "final_project_presentation.html#need-to-identify-block-and-lot-numbers-on-streets",
    "href": "final_project_presentation.html#need-to-identify-block-and-lot-numbers-on-streets",
    "title": "STA 9750 Final Project Presentation",
    "section": "Need to identify block and lot numbers on streets",
    "text": "Need to identify block and lot numbers on streets"
  },
  {
    "objectID": "final_project_presentation.html#with-block-and-lot-numbers-we-can-identify-tax-assessments",
    "href": "final_project_presentation.html#with-block-and-lot-numbers-we-can-identify-tax-assessments",
    "title": "STA 9750 Final Project Presentation",
    "section": "With block and lot numbers we can identify tax assessments",
    "text": "With block and lot numbers we can identify tax assessments"
  },
  {
    "objectID": "final_project_presentation.html#identify-comparable-neighboring-streets-by-traffic-flows",
    "href": "final_project_presentation.html#identify-comparable-neighboring-streets-by-traffic-flows",
    "title": "STA 9750 Final Project Presentation",
    "section": "Identify comparable, neighboring streets by traffic flows",
    "text": "Identify comparable, neighboring streets by traffic flows"
  },
  {
    "objectID": "final_project_presentation.html#attempting-to-control-for-these-influences",
    "href": "final_project_presentation.html#attempting-to-control-for-these-influences",
    "title": "STA 9750 Final Project Presentation",
    "section": "…attempting to control for these influences:",
    "text": "…attempting to control for these influences:"
  },
  {
    "objectID": "final_project_presentation.html#what-makes-a-neighborhood-expensive-in-nyc",
    "href": "final_project_presentation.html#what-makes-a-neighborhood-expensive-in-nyc",
    "title": "STA 9750 Final Project Presentation",
    "section": "What makes a neighborhood expensive in NYC?",
    "text": "What makes a neighborhood expensive in NYC?\nLocation: Proximity to Manhattan often increases prices.\nTransportation: Better access to subways, buses, and major roads raises desirability.\nAmenities: Access to parks, schools, dining, shopping, and cultural attractions.\nCrime: Safer neighborhoods tend to be more expensive.\nStatus: Historical prestige, architecture, and celebrity residents can elevate prices"
  },
  {
    "objectID": "final_project_presentation.html#project-question",
    "href": "final_project_presentation.html#project-question",
    "title": "STA 9750 Final Project Presentation",
    "section": "Project Question:",
    "text": "Project Question:\nDo streets with less traffic and traffic violence increase property values?"
  },
  {
    "objectID": "final_project_presentation.html#do-streets-with-less-traffic-and-traffic-violence-increase-property-values-1",
    "href": "final_project_presentation.html#do-streets-with-less-traffic-and-traffic-violence-increase-property-values-1",
    "title": "STA 9750 Final Project Presentation",
    "section": "Do streets with less traffic and traffic violence increase property values?",
    "text": "Do streets with less traffic and traffic violence increase property values?"
  },
  {
    "objectID": "final_project_presentation.html#when-streets-minimize-traffic-incidents-is-there-a-corresponding-increase-in-property-values",
    "href": "final_project_presentation.html#when-streets-minimize-traffic-incidents-is-there-a-corresponding-increase-in-property-values",
    "title": "STA 9750 Final Project Presentation",
    "section": "When streets minimize traffic incidents, is there a corresponding increase in property values?",
    "text": "When streets minimize traffic incidents, is there a corresponding increase in property values?"
  },
  {
    "objectID": "final_project_presentation.html#questions-for-project",
    "href": "final_project_presentation.html#questions-for-project",
    "title": "STA 9750 Final Project Presentation",
    "section": "Questions for project",
    "text": "Questions for project\n\nCan we make geographic connections among our data with code? For instance: can we find traffic calmed corridors, and then identify neighboring properties by block and lot number? Can we isolate street regions bounded by cross streets?\nWhat statistical test should we use to test for significance in tax assessment changes?\nHow do we effectively and efficiently work with large files? (The tax assessment files are ~1GB)\nIs there enough media coverage to identify significant traffic calming projects?\nHow many traffic calmed corridors should we focus on?"
  },
  {
    "objectID": "final_project_presentation.html#that-is",
    "href": "final_project_presentation.html#that-is",
    "title": "STA 9750 Final Project Presentation",
    "section": "That is:",
    "text": "That is:"
  },
  {
    "objectID": "final_project_presentation.html#question",
    "href": "final_project_presentation.html#question",
    "title": "STA 9750 Final Project Presentation",
    "section": "Question?",
    "text": "Question?"
  },
  {
    "objectID": "final_project_presentation.html#challenges-for-project",
    "href": "final_project_presentation.html#challenges-for-project",
    "title": "STA 9750 Final Project Presentation",
    "section": "Challenges for project",
    "text": "Challenges for project\n\nCan we make geographic connections among our data with code?\nWhat statistical test should we use to test for significance in tax assessment changes?\nHow do we effectively and efficiently work with large files? (The tax assessment files are ~1GB)\nIs there enough media coverage to identify significant traffic calming projects?\nHow many traffic calmed corridors should we focus on?"
  },
  {
    "objectID": "final_project_presentation.html#challenging-part-of-project-geocoding",
    "href": "final_project_presentation.html#challenging-part-of-project-geocoding",
    "title": "STA 9750 Final Project Presentation",
    "section": "Challenging part of project: Geocoding",
    "text": "Challenging part of project: Geocoding\nOnce we’ve identified areas of interest, how do we go from?\nstreet -&gt; latitude and longitude\nlatitude and longitude -&gt; block, lot number\nidentifying a corridor of a street?\ncorrectly identifying a collection of properties?\nHow do we do this in code?"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "IMDb and Me",
    "section": "",
    "text": "This project useses the following packagaes: dplyr, tidyr, stringr, lubridate, readr, scales\nFor details on the data used for this project see Appendix A.\nOriginating in the proto-Internet era of Usenet groups in the early 1990s, the Internet Movie Database (with its instantly recognizable acronym: IMDb) has long been an indispensable source of pop culture information. Movie buffs, film industry professionals, trivia enthusiasts, and casual web surfers all agree IMDb is the go-to resource for anyone engaged in the history of motion pictures."
  },
  {
    "objectID": "final_project_presentation.html#data-sets-to-use",
    "href": "final_project_presentation.html#data-sets-to-use",
    "title": "STA 9750 Final Project Presentation",
    "section": "Data Sets to Use :",
    "text": "Data Sets to Use :\nNew York City Department of City Planning. (n.d.). Bytes of the Big Apple Archive. NYC Planning. Retrieved October 8, 2024, from https://www.nyc.gov/site/planning/data-maps/open-data/bytes-archive.page"
  },
  {
    "objectID": "final_project_presentation.html#data-sets-we-will-use",
    "href": "final_project_presentation.html#data-sets-we-will-use",
    "title": "STA 9750 Final Project Presentation",
    "section": "Data sets we will use",
    "text": "Data sets we will use\nProperty Assessment Roll Archives. NYC Department of Finance. link\nAutomated Traffic Volume Counts. NYC Department of Transportation. link"
  },
  {
    "objectID": "final_project_presentation.html#data-sets-we-may-use",
    "href": "final_project_presentation.html#data-sets-we-may-use",
    "title": "STA 9750 Final Project Presentation",
    "section": "Data sets we may use",
    "text": "Data sets we may use\nNew York City Department of City Planning. NYC Tax Lot Selector. link\nCity of New York: VZV Street Improvement Projects - SIPs Corridor. NYC Open Data. link"
  },
  {
    "objectID": "final_project_presentation.html#with-block-and-lot-numbers-we-can-identify-tax-assessments-1",
    "href": "final_project_presentation.html#with-block-and-lot-numbers-we-can-identify-tax-assessments-1",
    "title": "STA 9750 Final Project Presentation",
    "section": "With block and lot numbers we can identify tax assessments",
    "text": "With block and lot numbers we can identify tax assessments"
  },
  {
    "objectID": "final_project_presentation.html#tax-lot-selector",
    "href": "final_project_presentation.html#tax-lot-selector",
    "title": "STA 9750 Final Project Presentation",
    "section": "Tax Lot Selector",
    "text": "Tax Lot Selector"
  },
  {
    "objectID": "final_project_presentation.html#challenges-continued",
    "href": "final_project_presentation.html#challenges-continued",
    "title": "STA 9750 Final Project Presentation",
    "section": "Challenges (continued…)",
    "text": "Challenges (continued…)\n\nHow many traffic calmed corridors should we focus on?"
  },
  {
    "objectID": "final_project_presentation.html#the-city-does-identify-singular-vision-zero-improvemments",
    "href": "final_project_presentation.html#the-city-does-identify-singular-vision-zero-improvemments",
    "title": "STA 9750 Final Project Presentation",
    "section": "The City does identify singular Vision Zero improvemments",
    "text": "The City does identify singular Vision Zero improvemments"
  },
  {
    "objectID": "final_project_presentation.html#nyc-does-identify-singular-vision-zero-improvemments",
    "href": "final_project_presentation.html#nyc-does-identify-singular-vision-zero-improvemments",
    "title": "STA 9750 Final Project Presentation",
    "section": "NYC does identify singular Vision Zero improvemments",
    "text": "NYC does identify singular Vision Zero improvemments"
  },
  {
    "objectID": "final_project_presentation.html#again-with-block-and-lot-numbers-we-can-identify-tax-assessments",
    "href": "final_project_presentation.html#again-with-block-and-lot-numbers-we-can-identify-tax-assessments",
    "title": "STA 9750 Final Project Presentation",
    "section": "(again) …with block and lot numbers we can identify tax assessments",
    "text": "(again) …with block and lot numbers we can identify tax assessments"
  },
  {
    "objectID": "final_project_presentation.html#challenging-geocoding",
    "href": "final_project_presentation.html#challenging-geocoding",
    "title": "STA 9750 Final Project Presentation",
    "section": "Challenging: Geocoding",
    "text": "Challenging: Geocoding\nOnce we’ve identified areas of interest, how do we go from?\nstreet -&gt; latitude and longitude\nlatitude and longitude -&gt; block, lot number\nidentifying a corridor of a street?\ncorrectly identifying a collection of properties?\nHow do we do this in code?"
  },
  {
    "objectID": "final_project_presentation.html#challenge-geocoding",
    "href": "final_project_presentation.html#challenge-geocoding",
    "title": "STA 9750 Final Project Presentation",
    "section": "Challenge: Geocoding",
    "text": "Challenge: Geocoding\nOnce we’ve identified areas of interest, how do we go from?\nstreet -&gt; latitude and longitude\nlatitude and longitude -&gt; block, lot number\nidentifying a corridor of a street?\ncorrectly identifying a collection of properties?\nHow do we do this in code?"
  },
  {
    "objectID": "final_project_presentation.html#thank-you",
    "href": "final_project_presentation.html#thank-you",
    "title": "STA 9750 Final Project Presentation",
    "section": "Thank You!",
    "text": "Thank You!\nClinta and Jason :-)"
  },
  {
    "objectID": "final_project_presentation.html#additional-questions",
    "href": "final_project_presentation.html#additional-questions",
    "title": "STA 9750 Final Project Presentation",
    "section": "Additional Questions",
    "text": "Additional Questions\n\nIs there a geographic or NYC borough trend with our conclusions?\nDid Bloomberg’s major street transformations of the late 2000s have a bigger influence on real estate values than the more modest transformations of the De Blasio and Adams administrations?\nIs there a difference between residential and commerical property changes?"
  },
  {
    "objectID": "mp02.html#footnotes",
    "href": "mp02.html#footnotes",
    "title": "IMDB and Me",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ndog &lt;- \"dogg\"↩︎"
  },
  {
    "objectID": "mp02.html#how-data-was-loaded",
    "href": "mp02.html#how-data-was-loaded",
    "title": "IMDB and Me",
    "section": "How Data Was Loaded",
    "text": "How Data Was Loaded\nIn this section, I describe how the data was loaded into the project.\n# Example of loading data in R\ndata &lt;- read.csv(\"path/to/your/data.csv\")"
  },
  {
    "objectID": "mp02.html#appendixA",
    "href": "mp02.html#appendixA",
    "title": "IMDb and Me",
    "section": "Appendix A",
    "text": "Appendix A\n\nHow Data Was Loaded\nIn this section, I describe how the data was loaded into the project.\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(readr)\n\nDATA_FOLDER &lt;- \"data/mp02/\"\n\nget_IMDb_file &lt;- function(fname){\n     as.data.frame(readr::read_csv(fname, lazy=FALSE))\n }\n\ncreate_file_ext &lt;- function(fname){\n   paste0(DATA_FOLDER, fname)\n}\n\n# IMDb DATA\n\nNAME_BASICS &lt;- get_IMDb_file(create_file_ext(\"NAME_BASICS.csv\"))\nTITLE_RATINGS &lt;- get_IMDb_file(create_file_ext(\"TITLE_RATINGS.csv\"))\nTITLE_BASICS &lt;- get_IMDb_file(create_file_ext(\"TITLE_BASICS.csv\"))\nTITLE_CREW &lt;- get_IMDb_file(create_file_ext(\"TITLE_CREW.csv\"))\nTITLE_EPISODES &lt;- get_IMDb_file(create_file_ext(\"TITLE_EPISODES.csv\"))\nTITLE_PRINCIPALS &lt;- get_IMDb_file(create_file_ext(\"TITLE_PRINCIPALS.csv\"))\n\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n    mutate(birthYear = as.numeric(birthYear),\n           deathYear = as.numeric(deathYear))\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n     mutate(averageRating = as.numeric(averageRating),\n            numVotes = as.numeric(numVotes))\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n    mutate(isAdult = as.logical(isAdult),\n           runtimeMinutes = ifelse(grepl(\"[^0-9]\", runtimeMinutes), NA, as.numeric(runtimeMinutes)))\n\n# MOVIE LENS\n\nMOVIE_LENS_RATINGS &lt;- read.csv(\"data/mp02/ml-32m/ratings.csv\")\n\nMOVIE_LENS_LINKS &lt;- read.csv(\"data/mp02/ml-32m/links.csv\")\n\nmovie_lens_ratings_merged &lt;- MOVIE_LENS_RATINGS |&gt;\n   group_by(movieId) |&gt;\n   summarize(count_reviews = n())\n\n# KAGGLE\n\nKAGGLE_DATA &lt;- read.csv(\"data/mp02/KAGGLE_DATA.csv\") |&gt;\n   mutate(budget = ifelse(is.na(budget), 0, parse_number(budget)))\n\n# CPI\n\nHISTORICAL_CPI &lt;- read.csv(\"data/mp02/HISTORICAL_CPI.csv\") |&gt;\n   mutate(year = substring(DATE,1,4))\n\ncpi_named_vector &lt;- setNames(HISTORICAL_CPI$CPIAUCNS, HISTORICAL_CPI$year)\nhead(names_in_many_big_productions)  \n\n\n\nmovies_meeting_review_threshold &lt;- movies_lens_ratings_merged |&gt; filter(count_reviews &gt;= 1000) |&gt; pull(movieId)\nfiltered_reviews &lt;- MOVIE_LENS_RATINGS |&gt; filter(movieId %in% movies_meeting_review_threshold)\nmovie_lens__IMDb &lt;- filtered_reviews |&gt; inner_join(MOVIE_LENS_LINKS, by = “movieId”)\n\n\n&gt; show the code\n\n\nhello &lt;- \"hello\"\n\n\n\nWhen we say “movie” we often think of “what is opening this Friday” and with it: “what film will win the weekend box office?”\nIf we look at the Kaggle Movie Dataset, we see\nquantile(KAGGLE_DATA$revenue, probs = seq(0,1,.05), na.rm=TRUE)"
  },
  {
    "objectID": "mp02.html#how-often-has-a-producer-been-given-the-proverbial-green-light",
    "href": "mp02.html#how-often-has-a-producer-been-given-the-proverbial-green-light",
    "title": "IMDB and Me",
    "section": "How often has a producer been given the proverbial “green light”?",
    "text": "How often has a producer been given the proverbial “green light”?\nThe “M” in the moniker obviously denotes “movie” and there are indeed 131,890 traditional “movies” in IMDB. However, many take a different interpretations as to what is - and what is not - a “movie” and IMDB maintains a separate designation for tvMovie.\nThe author contends that the films produced by the premium television outlet Home Box Office are significant films all-too-often overlooked by film afficianados and sure enough, HBO films are considered television films by IMDB :\ntitleType   primaryTitle            startYear\ntvMovie     And the Band Played On  1993\n\ntitleType   primaryTitle            startYear\ntvMovie     Recount                 2008\n  \ntitleType   primaryTitle            startYear\ntvMovie     Conspiracy              2001\nNot an HBO original, but this tvMovie is partially credited for ending The Cold War:\ntitleType   primaryTitle    startYear\ntvMovie     The Day After   1983\nThe above are all noteworthy (underrated) films more than deserving to be considered and counted alongside IMDB’s critera for “movie”. If we were to count both movie and tvMovie we would find 146,915 movie titles in IMDB.\n…Speaking of television, that “M” in IMDB can be something of a misnomer. IMDB collects data on both film and television too. And within the database, IMDB doesn’t just maintain an entry for every television series, but actually has a record for each televison season and a record for every televsion episode. All told there are 29,868 series within IMDB represented by over 3,012,678 individual episdoes.\nIf television is collected this extensively in the database, what else does IMDB collect? What else is in the database?\n\nI’d argue the collection of Video Games will prove increasingly important as this media form grows in cultural influence. I can certainly see a future where Video Games are of equal cultural significance (…if were not at that momemnt already?) as film and TV is today.\n\n\n&gt; show the code\n\n# How many films are in IMDB? \nTITLE_BASICS |&gt; \n  filter(titleType == \"movie\" | titleType == \"tvMovie\") |&gt;\n  count()\n\n# What if we include TV Moives?   \nTITLE_BASICS |&gt; \n  filter(titleType == \"movie\" | titleType == \"tvMovie\") |&gt;\n  count()\n\n# What if we searched for a particular HBO Moive?    \nTITLE_BASICS |&gt; \n  filter(primaryTitle == \"And the Band Played On\") |&gt; \n  select(titleType, primaryTitle, startYear)\n\n# How many television series are in IMDB? \nTITLE_BASICS |&gt; \n  filter(titleType == \"tvSeries\") |&gt;\n  count()\n\n# How many individual episodes are collected? \nTITLE_EPISODES |&gt;\n  nrow()\n\n# What are the different title types in IMDB  \ntitle_type_counts &lt;- TITLE_BASICS |&gt; \n  group_by(titleType) |&gt; \n  summarize(count = n())\n  \n# Let's visualize the breakdown of all the different title types\nggplot(title_type_counts, aes(x = \"\", y = count, fill = titleType)) + \n  geom_bar(stat = \"identity\", width = 0.7) +\n  labs(title = \"IMDB Media Types and Their Counts\", x = NULL, y = \"Count\") +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  scale_fill_brewer(palette = \"Set3\")\n  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  \n\n\n\n\n&gt; show the code\n\n\n\n[1] \"doggnose\"\n\n\n\n\n\n\n\n\n\nmovies_meeting_review_threshold &lt;- movies_lens_ratings_merged |&gt; filter(count_reviews &gt;= 1000) |&gt; pull(movieId)\nfiltered_reviews &lt;- MOVIE_LENS_RATINGS |&gt; filter(movieId %in% movies_meeting_review_threshold)\nmovie_lens__IMDB &lt;- filtered_reviews |&gt; inner_join(MOVIE_LENS_LINKS, by = “movieId”)\n\n\n&gt; show the code\n\n\nhello &lt;- \"hello\"\n\n\n\nWhen we say “movie” we often think of “what is opening this Friday” and with it: “what film will win the weekend box office?”\nIf we look at the Kaggle Movie Dataset, we see\nquantile(KAGGLE_DATA$revenue, probs = seq(0,1,.05), na.rm=TRUE)\n\nNAME_BASICS |&gt; filter(birthYear &lt;= 1914 & is.na(deathYear)) |&gt; nrow() \nThe Gerontology Research Group rigorously counts “supercentarians” around the world. A supercentarian is an individual equal-to, or older-than, the age of 110. At current count, there are approximately ~310 supercentarians in the world.\nClearly there is an issue with the IMDB dataset identifying 2,514 supercentarians in the film industry. There obviously are a multitude of deaths unreported in this data.\nBut, just because you’re old and you possibly “one-time-maybe did something in the film industry”, should anyone care? There are millions of people who throughout their lives have no-doubt been involved in at least 1 movie production in their lives. Does “old person who once worked on a forgotten independent movie no-one-saw” really communicate anything to us?\nI don’t think it does.\nMy childhood friend Rob went to film school in the late 1990s. He briefly worked in the film industry for a few years after graduation but quickly decided he did not want a career in movies. While I can tell you Rob is a very talented individual, he has long since had anything to do with the film industry.\nMy friend Rob is in the IMDB dataset: https://www.imdb.com/name/nm0551343/?ref_=fn_al_nm_1\nWith all due respect to Rob, his talents and his successful post-film career (he’s a tenure-track professor of education), do we really want to count “the Robs” of our dataset?\nCan we filter out the Robs and the like and arrive on a collection of individuals “significant enough in the film industry” to warrant our interest and attention?\nI think we can.\nLet’s first try to identify “significant film productions” in our data.\nI’m going to use the measure of: “if this film had a lot of people working on it, it no doubt cost a lot of money and was of signifcant interest to some studio or production company.” So I’m going to count the\nNAME_BASICS |&gt; nrow() \nNAME_BASICS &lt;- NAME_BASICS |&gt; mutate(birthYear = as.numeric(birthYear), deathYear = as.numeric(deathYear))\nCREW_COUNTS_FOR_TITLE &lt;- TITLE_PRINCIPALS |&gt; group_by(tconst) |&gt; summarize(crew_members = n())\nquantile(CREW_COUNTS_FOR_TITLE$crew_members, probs = seq(0.1, 1, by=.1))\nBIG_PRODUCTIONS &lt;- CREW_COUNTS_FOR_TITLE |&gt; filter(crew_members &gt;= 24)\n\n\nNAMEIDS_IN_MANY_BIG_PRODUCTIONS &lt;- BIG_PRODUCTIONS |&gt; inner_join(TITLE_PRINCIPALS, join_by(tconst == tconst)) |&gt; group_by(nconst) |&gt; summarize(number_of_big_productions = n()) |&gt; filter(number_of_big_productions &gt; 20) |&gt; arrange(desc(number_of_big_productions))\nLet’s spot check out data…\nNAMES_IN_MANY_BIG_PRODUCTIONS &lt;- NAMEIDS_IN_MANY_BIG_PRODUCTIONS |&gt; inner_join(NAME_BASICS, join_by(nconst == nconst)) |&gt; mutate(deathYear = ifelse(is.na(deathYear), 0, deathYear)) |&gt; mutate(age = ifelse(deathYear == 0, 2024 - birthYear, deathYear - birthYear))\nThis data is identifying well-known voice actors:\n        \nNAMES_IN_MANY_BIG_PRODUCTIONS |&gt; filter(deathYear == 0) |&gt; arrange(desc(age)) |&gt; slice(1)\n\n\ntop_episodes &lt;- TITLE_RATINGS |&gt; filter(averageRating == 10 & numVotes &gt;= 200000)\nepisode_details &lt;- top_episodes |&gt; inner_join(TITLE_BASICS, by = “tconst”) |&gt; inner_join(TITLE_EPISODES, by = “tconst”)\nresult &lt;- episode_details |&gt; inner_join(TITLE_BASICS, by = c(“parentTconst” = “tconst”)) |&gt; select(tconst, parentTconst, seriesTitle = primaryTitle.y)\n\nmark_hamil_popular_works_IDs &lt;- NAME_BASICS |&gt; filter(primaryName == “Mark Hamill”) |&gt; separate_rows(knownForTitles, sep =“,”)\nmark_hamil_popular_works |&gt; inner_join(TITLE_BASICS, by = c(“knownForTitles” = “tconst”)) |&gt; select(-knownForTitles, -primaryProfession, -birthYear, -deathYear, -isAdult)\n\n\n\n\ntv_show_12_episodes &lt;- TITLE_EPISODES |&gt; group_by(parentTconst) |&gt; mutate(numberOfEpisodes = n()) |&gt;\narrange(desc(numberOfEpisodes))\ntv_show_12_episodes_high_rating_ID &lt;- tv_show_12_episodes |&gt; inner_join(TITLE_RATINGS, by = “tconst”) |&gt; select(-seasonNumber, -episodeNumber, -tconst) |&gt; group_by(parentTconst) |&gt; mutate(average_rating_for_series = mean(averageRating), total_votes = sum(numVotes)) |&gt;\nquantile(tv_show_12_episodes_high_rating_ID$total_votes, prob = seq(0,1,.05))\n   \ntv_show_12_episodes_high_rating_titles &lt;- tv_show_12_episodes_high_rating_ID |&gt; filter(total_votes &gt; 268000) |&gt; inner_join(TITLE_BASICS, join_by(parentTconst == tconst))\ntv_show_12_episodes_high_rating_titles &lt;- tv_show_12_episodes_high_rating_ID |&gt; filter(total_votes &gt; 268000) |&gt; inner_join(TITLE_BASICS, join_by(parentTconst == tconst)) |&gt; group_by(parentTconst, primaryTitle) |&gt;\nsummarize(average_rating_for_series = first(average_rating_for_series), .groups = ‘drop’) |&gt;\narrange(desc(average_rating_for_series))\nprint(tv_show_12_episodes_high_rating_titles, n = 50)\n        \n\n\n\ntitle_basics_movie_lens_id &lt;- TITLE_BASICS |&gt; mutate(imdbId = as.numeric(substring(tconst, 3)))\n\nmovie_lens_and_imdb &lt;- title_basics_movie_lens_id |&gt; inner_join(movie_lens_filtered_reviews_IMDB, by = “imdbId”) |&gt; select(-isAdult, -endYear, -runtimeMinutes, -tmdbId, -titleType) |&gt; mutate(yearReview = year(as.POSIXct(timestamp, origin=“1970-01-01”)))\n\nmovie_lens_and_imdb_5_year_reviews &lt;- movie_lens_and_imdb |&gt; filter(yearReview - startYear &gt;= 5) |&gt; group_by(imdbId, primaryTitle, startYear) |&gt; summarize(avg_review = mean(rating)) |&gt; select(-imdbId) |&gt; arrange(desc(avg_review))\nprint(movie_lens_and_imdb_5_year_reviews, n=50)\nmin(movie_lens_and_imdb$yearReview) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmovie_lens_and_imdb_year_review &lt;- movie_lens_and_imdb |&gt; group_by(imdbId, primaryTitle, startYear) |&gt; summarize(avg_review = mean(rating)) |&gt; arrange(desc(avg_review))\nprint(movie_lens_and_imdb_year_review, n = 50)\n         \npolarizing_films &lt;- movie_lens_and_imdb |&gt; group_by(imdbId, primaryTitle, startYear, genres) |&gt; summarise(mean_rating = mean(rating), sd_rating = sd(rating), num_ratings = n()) |&gt; arrange(desc(sd_rating)) |&gt; select(-imdbId)\npolarizing_films\npolarizing_films &lt;- movie_lens_and_imdb |&gt; group_by(movieId, primaryTitle, startYear, genres) |&gt; summarise(mean_rating = mean(rating), iqr_rating = IQR(rating), num_ratings = n()) |&gt; arrange(desc(iqr_rating))\npolarizing_films &lt;- movie_lens_and_imdb |&gt; group_by(movieId, primaryTitle, startYear, genres) |&gt; summarise(mean_rating = mean(rating), var_rating = var(rating), num_ratings = n()) |&gt; arrange(desc(var_rating))\n\nmovie_lens_and_imdb_and_kaggle &lt;- movie_lens_and_imdb |&gt; inner_join(KAGGLE_DATA, join_by(tconst == imdb_id))\nmovie_lens_and_imdb_and_kaggle\nget_dollar_adjusted_value &lt;- function(budget, year){ return (budget * cpi_named_vector[as.character(2024)]/cpi_named_vector[as.character(year)]) }\nvotes_budget &lt;- movie_lens_and_imdb_and_kaggle |&gt; group_by(imdbId, primaryTitle, budget, startYear, revenue) |&gt; summarize(num_votes = n()) |&gt; mutate(adjusted_budget = get_dollar_adjusted_value(budget, startYear), adjusted_profit = get_dollar_adjusted_value(revenue, startYear) - get_dollar_adjusted_value(budget, startYear) )\nmodel_profit &lt;- lm(votes_budget\\(num_votes ~  votes_budget\\)adjusted_profit)\nreg_line &lt;- function(x_val, model){ return(coef(model)[1] + coef(model)[2] * x_val) }\nvotes_budget_profit &lt;- votes_budget |&gt; mutate(popularity_over_profit = num_votes - reg_line(adjusted_profit, model_profit)) |&gt; arrange(desc(popularity_over_profit))\n\nggplot(data = votes_budget_profit, aes(x = adjusted_profit, y = num_votes )) + geom_point(alpha = 0.1) + geom_smooth(method=“lm”, se=FALSE)\nmodel_budget &lt;- lm(votes_budget\\(num_votes ~  votes_budget\\)adjusted_budget)\nvotes_budget_budget &lt;- votes_budget |&gt; mutate(popularity_over_budget = num_votes - reg_line(adjusted_budget, model_profit)) |&gt; arrange(desc(popularity_over_budget))\nprint(votes_budget_budget, n =100)\n\nvotes_budget |&gt; arrange(desc(adjusted_budget)) |&gt; print(n = 100)\ntop_500_polarizing_films &lt;- head(polarizing_films, 500)\ntop_500_polarizing_films_w_budget &lt;- top_500_polarizing_films |&gt; inner_join(KAGGLE_DATA, join_by(imdbId == imdb_id))\ntop_500_polarizing_films_w_budget"
  },
  {
    "objectID": "mp02.html#whats-in-the-box",
    "href": "mp02.html#whats-in-the-box",
    "title": "IMDb and Me",
    "section": "What’s in the box?",
    "text": "What’s in the box?\n\nHow many green lights have been granted in Hollywood?\nThe “M” in the moniker obviously denotes “movie” and there are indeed 131,890 traditional “movies” in IMDb. However, many take a different interpretations as to what is - and what is not - a “movie” and IMDb maintains a separate designation for tvMovie.\nThe author contends that the films produced by the premium television outlet Home Box Office are significant films all-too-often overlooked by film afficianados and sure enough, HBO films are considered television films by IMDb :\ntitleType   primaryTitle            startYear\ntvMovie     And the Band Played On  1993\n\ntitleType   primaryTitle            startYear\ntvMovie     Recount                 2008\n  \ntitleType   primaryTitle            startYear\ntvMovie     Conspiracy              2001\nNot an HBO original, but this tvMovie is partially credited for ending The Cold War:\ntitleType   primaryTitle    startYear\ntvMovie     The Day After   1983\nThe above are all noteworthy (underrated) films more than deserving to be considered and counted alongside IMDb’s critera for “movie”. If we were to count both movie and tvMovie we would find 146,915 movie titles in IMDb.\n…Speaking of television, that “M” in IMDb can be something of a misnomer. IMDb collects data on both film and television too. And within the database, IMDb doesn’t just maintain an entry for every television series, but actually has a record for each televison season and a record for every televsion episode. All told there are 29,868 series within IMDb represented by over 3,012,678 individual episdoes.\nIf television is collected this extensively in the database, what else does IMDb collect? What else is in the database?\n\nI’d argue the collection of Video Games will prove increasingly important as this media form grows in cultural influence. I can certainly see a future where Video Games are of equal cultural significance (…if were not at that momemnt already?) as film and TV is today.\n\n\n&gt; show the code\n\n# How many films are in IMDb? \nTITLE_BASICS |&gt; \n  filter(titleType == \"movie\" | titleType == \"tvMovie\") |&gt;\n  count()\n\n# What if we include TV Moives?   \nTITLE_BASICS |&gt; \n  filter(titleType == \"movie\" | titleType == \"tvMovie\") |&gt;\n  count()\n\n# What if we searched for a particular HBO Moive?    \nTITLE_BASICS |&gt; \n  filter(primaryTitle == \"And the Band Played On\") |&gt; \n  select(titleType, primaryTitle, startYear)\n\n# How many television series are in IMDb? \nTITLE_BASICS |&gt; \n  filter(titleType == \"tvSeries\") |&gt;\n  count()\n\n# How many individual episodes are collected? \nTITLE_EPISODES |&gt;\n  nrow()\n\n# What are the different title types in IMDb  \ntitle_type_counts &lt;- TITLE_BASICS |&gt; \n  group_by(titleType) |&gt; \n  summarize(count = n())\n  \n# Let's visualize the breakdown of all the different title types\nggplot(title_type_counts, aes(x = \"\", y = count, fill = titleType)) + \n  geom_bar(stat = \"identity\", width = 0.7) +\n  labs(title = \"IMDb Media Types and Their Counts\", x = NULL, y = \"Count\") +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  scale_fill_brewer(palette = \"Paired\")\n  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  \n\n\n\n\n110 years old you reach, look as good you will not\nIMBb is a unrivaled resource for assessing film history. And by history, there is actually some capital “H” history in IMDb.\nIMDb counts 4 as the oldest birthYear for any individual in its dataset. And not just 4, there are also birthYear values for 46, 69, 70, 163, 254. As far as we know, film production is a ~150 year old technology.\nWhat is going on?\nWho was born in year 4? Year 46? Year 69?\n             primaryName\n1       Flavius Josephus\n2 Publius Vergilius Maro\n3                   Ovid\n4  Titus Maccius Plautus\n5     Lucio Anneo Seneca\n6            Cassius Dio\n7               Plutarch\n8              Suetonius\nAre you entertained? A fascinating qwirk of IMDb database is that it credits classical writers and historians for modern film production, again, proving IMDb is if nothing else an historical resource and begs the important question?\nDoes Zach Snyder share 300 points with Plutarch?\nBut how about someone we know or can identify? Who is eldest creator still alive in the IMDb database? A seemingly easy way to identify “oldest creator in IMDb” would be to seek out creators with an NA for deathYear.\nUnfortunately there are quite a few people IMDb considers living in their sunset years. IMDb idetifies 2,514 “supercentarians” - individuals 110 years of age or older - who at one time worked the film industry.\nThe Gerontology Research Group rigorously counts “supercentarians” around the world. A supercentarian is an individual equal-to, or older-than, the age of 110. At current count, there are approximately ~310 supercentarians in the world.\nClearly there is an issue with the IMDb dataset identifying 2,514 supercentarians in the film industry. There obviously are a multitude of deaths unreported in this data.\nBut, just because you’re old and you possibly “one-time-maybe did something in the film industry”, should anyone care? There are millions of people who throughout their lives have no-doubt been involved in at least 1 movie production in their lives. Does “old person who once worked on a forgotten independent movie no-one-saw” really communicate anything to us?\nI posit that anyone who did anything significant in the film industry would have their deathYear duly reported. Therefore, let’s re-start our search and see if we can arrive at a collection of individuals “significant enough in the film industry” to warrant our interest and attention.\nLet’s first try to identify “significant film productions” in our data.\nI’m going to use the measure of: “if this film had a lot of people working on it, it no doubt cost a lot of money and was of notable interest to some studio or production company.” So I’m going to count the number of crew on a film and look for a threshold for top produciton.\nHere are the quantiles for the crew counts:\n10%  20%  30%  40%  50%  60%  70%  80%  90% 100% \n10   14   16   18   19   20   21   22   24   65 \n90% of all productions have 24+ or more crew numbers working on them. I’m going to identify any person “significant” in the films industry as someone who has worked on 20+ such productions. Sorted on number_of_big_productions worked on, sure enough this yields useful information:\n\nData for Big Productions by Various Individuals, Including Age\n\n\n\n\n\n\n\n\n\nprimaryName\nbirthYear\nnumber_of_big_productions\nage\ndeathYear\n\n\n\n\nSeth MacFarlane\n1973\n2505\n51\n0\n\n\nDee Bradley Baker\n1962\n2311\n62\n0\n\n\nDan Castellaneta\n1957\n2242\n67\n0\n\n\nHank Azaria\n1964\n2191\n60\n0\n\n\nHarry Shearer\n1943\n2162\n81\n0\n\n\nEric Stuart\n1967\n2043\n57\n0\n\n\n\nThese names are all identifiable as prominent voice actors. So with this collection of notable individuals, let’s idenfity the oldest individual in this data set:\n\nWhat a find\n\n\n\n\n\n\n\n\n\nprimaryName\nbirthYear\nnumber_of_big_productions\nage\ndeathYear\n\n\n\n\nMel Brooks\n1926\n37\n98\n0\n\n\n\n\n\n&gt; show the code\n\n# Who is the oldest individual in IMDb?\nmin(NAME_BASICS$birthYear, na.rm=TRUE)\n\n# A birthyear of '4'! Is this a mistake? \nsort(unique(NAME_BASICS$birthYear))\n\n# Who are these individuals? \nNAME_BASICS |&gt; \n  filter(\n    birthYear == 4 | \n    birthYear ==  37 |\n    birthYear ==  43 | \n    birthYear == 46 | \n    birthYear == 69 | \n    birthYear == 70 |\n    birthYear == 163 | \n    birthYear == 254\n    ) |&gt; \n  select(primaryName)\n  \n# Are there really that many 110 year-olds in this database? \nNAME_BASICS |&gt;\n  filter(birthYear &lt;= 1914 & is.na(deathYear)) |&gt;\n  nrow()\n\n# Let's count the amont of crew working for a poduction \ncrew_counts_for_title &lt;- TITLE_PRINCIPALS |&gt; \n  group_by(tconst) |&gt; \n  summarize(crew_members = n()) \n\n# Can we identify the threshold for 'big production' by crew count?\nquantile(crew_counts_for_title$crew_members, probs = seq(0.1, 1, by=.1))\n\n# Top 90% of productions have 24 crew members, so let's use that threshold\nbig_productions &lt;- crew_counts_for_title |&gt; \n  filter(crew_members &gt;= 24)\n\n# Using 24 crew members as a citeria for \"big production\", this\n# identifies all of the individuals who have worked on 20 or more \n# such productions, creating the criteria we're using for \"significant \n# individuals in film and television\"\nname_ids_in_many_big_productions &lt;- big_productions |&gt; \n  inner_join(TITLE_PRINCIPALS, by=\"tconst\" |&gt;\n  group_by(nconst) |&gt; \n  summarize(number_of_big_productions = n()) |&gt; \n  filter(number_of_big_productions &gt; 20) |&gt; \n  arrange(desc(number_of_big_productions))\n\n# Mathching up these ids with names \nnames_in_many_big_productions &lt;- name_ids_in_many_big_productions |&gt;\n  inner_join(NAME_BASICS, join_by(nconst == nconst)) |&gt;\n  mutate(deathYear = ifelse(is.na(deathYear), 0, deathYear)) |&gt; \n  mutate(age = ifelse(deathYear == 0, 2024 - birthYear, deathYear - birthYear)) |&gt; \n  select(primaryName, birthYear, number_of_big_productions, age, deathYear)\n\n# Who is the oldest individual in this data set?\nnames_in_many_big_productions |&gt; \n  filter(deathYear == 0) |&gt;\n  arrange(desc(age)) |&gt;\n  slice(1)\n\n\n\n\nSingular TV Episode rated highly\n\nHank!\n\n\nseries_title\nepisode_title\nyear\n\n\n\n\nBreaking Bad\nOzymandias\n2013\n\n\n\n\n\n&gt; show the code\n\ntop_episodes &lt;- TITLE_RATINGS |&gt;\n  filter(averageRating == 10 & numVotes &gt;= 200000)\n  \nepisode_details &lt;- top_episodes |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  inner_join(TITLE_EPISODES, by = \"tconst\")\n  \n\nepisode_details |&gt;\n  inner_join(TITLE_BASICS, join_by(\"parentTconst\" == \"tconst\")) |&gt;\n  select(series_title = primaryTitle.y, episode_title = primaryTitle.x, year = startYear.x)\n\n\n\n\nStar Wars and Mark Hamil\n\nData for Mark Hamill’s Star Wars Movies\n\n\n\n\n\n\n\nprimaryName\nprimaryTitle\nstartYear\n\n\n\n\nMark Hamill\nStar Wars: Episode IV - A New Hope\n1977\n\n\nMark Hamill\nStar Wars: Episode V - The Empire Strikes Back\n1980\n\n\nMark Hamill\nStar Wars: Episode VI - Return of the Jedi\n1983\n\n\nMark Hamill\nStar Wars: Episode VIII - The Last Jedi\n2017\n\n\n\n\n\n&gt; show the code\n\nmark_hamil_popular_works_IDs &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Mark Hamill\") |&gt;\n  separate_rows(knownForTitles, sep =\",\")\n  \nmark_hamil_popular_works_IDs |&gt; \n  inner_join(TITLE_BASICS, by = c(\"knownForTitles\" = \"tconst\")) |&gt; \n  select(primaryName, primaryTitle, startYear) |&gt;\n  arrange(startYear)\n\nmark_hamil_popular_works_IDs &lt;- NAME_BASICS |&gt; filter(primaryName == “Mark Hamill”) |&gt; separate_rows(knownForTitles, sep =“,”)\n\n\n\n\ntv_show_12_episodes &lt;- TITLE_EPISODES |&gt; group_by(parentTconst) |&gt; mutate(numberOfEpisodes = n()) |&gt;\narrange(desc(numberOfEpisodes))\ntv_show_12_episodes_high_rating_ID &lt;- tv_show_12_episodes |&gt; inner_join(TITLE_RATINGS, by = “tconst”) |&gt; select(-seasonNumber, -episodeNumber, -tconst) |&gt; group_by(parentTconst) |&gt; mutate(average_rating_for_series = mean(averageRating), total_votes = sum(numVotes)) |&gt;\nquantile(tv_show_12_episodes_high_rating_ID$total_votes, prob = seq(0,1,.05))\n   \ntv_show_12_episodes_high_rating_titles &lt;- tv_show_12_episodes_high_rating_ID |&gt; filter(total_votes &gt; 268000) |&gt; inner_join(TITLE_BASICS, join_by(parentTconst == tconst))\ntv_show_12_episodes_high_rating_titles &lt;- tv_show_12_episodes_high_rating_ID |&gt; filter(total_votes &gt; 268000) |&gt; inner_join(TITLE_BASICS, join_by(parentTconst == tconst)) |&gt; group_by(parentTconst, primaryTitle) |&gt;\nsummarize(average_rating_for_series = first(average_rating_for_series), .groups = ‘drop’) |&gt;\narrange(desc(average_rating_for_series))\nprint(tv_show_12_episodes_high_rating_titles, n = 50)\n        \n\n\n\ntitle_basics_movie_lens_id &lt;- TITLE_BASICS |&gt; mutate(IMDbId = as.numeric(substring(tconst, 3)))\n\nmovie_lens_and_IMDb &lt;- title_basics_movie_lens_id |&gt; inner_join(movie_lens_filtered_reviews_IMDb, by = “IMDbId”) |&gt; select(-isAdult, -endYear, -runtimeMinutes, -tmdbId, -titleType) |&gt; mutate(yearReview = year(as.POSIXct(timestamp, origin=“1970-01-01”)))\n\nmovie_lens_and_IMDb_5_year_reviews &lt;- movie_lens_and_IMDb |&gt; filter(yearReview - startYear &gt;= 5) |&gt; group_by(IMDbId, primaryTitle, startYear) |&gt; summarize(avg_review = mean(rating)) |&gt; select(-IMDbId) |&gt; arrange(desc(avg_review))\nprint(movie_lens_and_IMDb_5_year_reviews, n=50)\nmin(movie_lens_and_IMDb$yearReview) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmovie_lens_and_IMDb_year_review &lt;- movie_lens_and_IMDb |&gt; group_by(IMDbId, primaryTitle, startYear) |&gt; summarize(avg_review = mean(rating)) |&gt; arrange(desc(avg_review))\nprint(movie_lens_and_IMDb_year_review, n = 50)\n         \npolarizing_films &lt;- movie_lens_and_IMDb |&gt; group_by(IMDbId, primaryTitle, startYear, genres) |&gt; summarise(mean_rating = mean(rating), sd_rating = sd(rating), num_ratings = n()) |&gt; arrange(desc(sd_rating)) |&gt; select(-IMDbId)\npolarizing_films\npolarizing_films &lt;- movie_lens_and_IMDb |&gt; group_by(movieId, primaryTitle, startYear, genres) |&gt; summarise(mean_rating = mean(rating), iqr_rating = IQR(rating), num_ratings = n()) |&gt; arrange(desc(iqr_rating))\npolarizing_films &lt;- movie_lens_and_IMDb |&gt; group_by(movieId, primaryTitle, startYear, genres) |&gt; summarise(mean_rating = mean(rating), var_rating = var(rating), num_ratings = n()) |&gt; arrange(desc(var_rating))\n\nmovie_lens_and_IMDb_and_kaggle &lt;- movie_lens_and_IMDb |&gt; inner_join(KAGGLE_DATA, join_by(tconst == IMDb_id))\nmovie_lens_and_IMDb_and_kaggle\nget_dollar_adjusted_value &lt;- function(budget, year){ return (budget * cpi_named_vector[as.character(2024)]/cpi_named_vector[as.character(year)]) }\nvotes_budget &lt;- movie_lens_and_IMDb_and_kaggle |&gt; group_by(IMDbId, primaryTitle, budget, startYear, revenue) |&gt; summarize(num_votes = n()) |&gt; mutate(adjusted_budget = get_dollar_adjusted_value(budget, startYear), adjusted_profit = get_dollar_adjusted_value(revenue, startYear) - get_dollar_adjusted_value(budget, startYear) )\nmodel_profit &lt;- lm(votes_budget\\(num_votes ~  votes_budget\\)adjusted_profit)\nreg_line &lt;- function(x_val, model){ return(coef(model)[1] + coef(model)[2] * x_val) }\nvotes_budget_profit &lt;- votes_budget |&gt; mutate(popularity_over_profit = num_votes - reg_line(adjusted_profit, model_profit)) |&gt; arrange(desc(popularity_over_profit))\n\nggplot(data = votes_budget_profit, aes(x = adjusted_profit, y = num_votes )) + geom_point(alpha = 0.1) + geom_smooth(method=“lm”, se=FALSE)\nmodel_budget &lt;- lm(votes_budget\\(num_votes ~  votes_budget\\)adjusted_budget)\nvotes_budget_budget &lt;- votes_budget |&gt; mutate(popularity_over_budget = num_votes - reg_line(adjusted_budget, model_profit)) |&gt; arrange(desc(popularity_over_budget))\nprint(votes_budget_budget, n =100)\n\nvotes_budget |&gt; arrange(desc(adjusted_budget)) |&gt; print(n = 100)\ntop_500_polarizing_films &lt;- head(polarizing_films, 500)\ntop_500_polarizing_films_w_budget &lt;- top_500_polarizing_films |&gt; inner_join(KAGGLE_DATA, join_by(IMDbId == IMDb_id))\ntop_500_polarizing_films_w_budget"
  }
]