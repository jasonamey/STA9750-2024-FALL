library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(sf)
library(stringr)
library(statebins)
library(scales)

<style>
.flexbox-grid {
  display: grid !important;
  grid-template-columns: repeat(2, 1fr) !important; /* Two columns for a 2x2 grid */
  gap: 10px !important; /* Space between images */
}

.flexbox-grid img {
  width: 100% !important; /* Ensure images fill their grid cells */
  max-width: 100% !important; /* Control max image size */
}
</style>


<details>
<summary>\> show the code for data</summary>





```
#data download

ELECTION_DATA_HOUSE <- read_csv("data/mp03/dataversefiles/1976-2022-house.csv")
ELECTION_DATA_HOUSE <- ELECTION_DATA_HOUSE |> 
  filter(!is.na(party))

ELECTION_DATA_PRESIDENT <- read_csv("data/mp03/dataversefiles/1976-2020-president.csv")
ELECTION_DATA_PRESIDENT <- ELECTION_DATA_PRESIDENT |> 
  filter(!is.na(candidate) & !is.na(party_detailed))


congress_shapefiles_ucla <- function(start = 95, end = 112) {
  BASE_URL <- "https://cdmaps.polisci.ucla.edu/shp/districts"
  
  # Create directory if it doesn't exist
  if (!dir.exists("data/mp03/congress_shapefiles")) {
    dir.create("data/mp03/congress_shapefiles", recursive = TRUE)
  }
  
  for (congress in start:end) {
    # Format congress number with leading zeros
    congress_str <- sprintf("%03d", congress)
    file_url <- paste0(BASE_URL, congress_str, ".zip")
    dest_file <- paste0("data/mp03/congress_shapefiles/congress_", congress_str, "_shapefile.zip")
    
     #Avoid re-downloading
    if (!file.exists(dest_file)) {
      tryCatch({
        download.file(file_url, destfile = dest_file, mode = "wb")
        message("Downloaded shapefile for Congress ", congress_str)
      }, error = function(e) {
        message("Failed to download for Congress ", congress_str, ": ", e)
      })
    } else {
      message("File for Congress ", congress_str, " already exists. Skipping download.")
    }
  }
}

# Run function
congress_shapefiles_ucla(95, 98)

#####

congress_shapefiles_census <- function(start_year = 2013, end_year = 2023) {
  BASE_URL <- "https://www2.census.gov/geo/tiger/TIGER"
  
  # Create the download directory if it doesn’t exist
  if (!dir.exists("data/mp03/census_congress_shapefiles")) {
    dir.create("data/census_congress_shapefiles", recursive = TRUE)
  }
  
  # Determine Congress numbers based on years
  congress_numbers <- seq(113, 113 + (end_year - start_year) / 2, by = 1)
  years <- seq(start_year, end_year, by = 2) 

  for (i in seq_along(years)) {
    year <- years[i]
    congress <- congress_numbers[i]
    # Format as 'cd113', 'cd114', etc.
    congress_str <- sprintf("cd%d", congress)  
    file_url <- paste0(BASE_URL, year, "/CD/tl_", year, "_us_", congress_str, ".zip")
    dest_file <- paste0("data/mp03/census_congress_shapefiles/tl_", year, "_us_", congress_str, ".zip")
    
    #Avoid re-downloading
    if (!file.exists(dest_file)) {
      tryCatch({
        download.file(file_url, destfile = dest_file, mode = "wb")
        print("Downloaded shapefile for ", congress_str, " (Year ", year, ")")
      }, error = function(e) {
        print("Failed to download for ", congress_str, " (Year ", year, "): ", e)
      })
    } else {
      message("File for ", congress_str, " (Year ", year, ") already exists. Skipping download.")
    }
  }
}

#Run function
congress_shapefiles_census(2013, 2023)
```
</details>


This project uses packages `readr`, `dplyr`, `tidy`, `ggplot2`, `sf`


What are the states to lose the most Electoral College votes since 1976? 

| State        | 1976 | 2022 | Change |
|--------------|------|------|--------|
| New York     | 41   | 28   | -13    |
| Ohio         | 25   | 17   | -8     |
| Pennsylvania | 27   | 19   | -8     |
| Illinois     | 26   | 19   | -7     |
| Michigan     | 21   | 15   | -6     |

: Electoral Vote Losses By State (1976 vs. 2022)
{.striped .hover}


What are the states to gain the most Electoral College votes since 1976?


| State      | 1976 | 2022 | Change |
|------------|------|------|--------|
| Texas      | 26   | 40   | 14     |
| Florida    | 17   | 30   | 13     |
| California | 45   | 54   | 9      |
| Arizona    | 6    | 11   | 5      |
| Georgia    | 12   | 16   | 4      |

: Congressional District Growth By State (1976 vs. 2022)
{.striped .hover}

<details>
<summary>\>show the code</summary>

``` r


electoral_votes_76_22 <- ELECTION_DATA_HOUSE |> 
  filter(year == 1976 | year == 2022 ) |>
  group_by(year, state) |>
  summarize(votes = n_distinct(district) + 2) |> 
  pivot_wider(names_from = year, values_from = votes) |>
  mutate(change = `2022` - `1976`)


electoral_votes_76_22 |> 
  arrange(change)

electoral_votes_76_22 |> 
  arrange(desc(change))

View(election_data)

```
</details>

## fun time for fusion

| Year | State    | District | Winner       | Party                                         | Loser       | Party                                 | Highest % |
|------|----------|----------|-------------------------|-------------------------------------------------------|-------------------------|----------------------------------------------|----------------------------|
| 1980 | NY | 3        | Gregory W Carman        | Conservative, Republican                              | Jerome A Ambro Jr      | Democrat, Right To Life                     | **0.429**                      |
| 1980 | NY | 6        | John LeBoutillier       | Conservative, Republican, Right To Life               | Lester L Wolff         | Democrat, Liberal                           | **0.437**                      |
| 1986 | NY | 27       | George C Wortley        | Conservative, Republican                              | Rosemary S Pooler      | Democrat, Effective Congress                | **0.483**                      |
| 1994 | NY | 1        | Michael P Forbes        | Conservative, Republican, Right To Life               | George J Hochbrueckner | Democrat, Long Island First                 | **0.428**                      |
| 1996 | NY | 1        | Michael P Forbes        | Conservative, Independence, Republican, Right To Life | Nora L Bredes          | Democrat, Save Medicare                     | **0.398**                      |
| 1996 | NY | 30       | Jack Quinn              | Conservative, Freedom, Independence, Republican       | Francis J Pordum       | Democrat, Protect Seniors                   | **0.405**                      |
| 2006 | NY | 25       | James T Walsh           | Conservative, Independence, Republican                | Dan Maffei             | Democrat, Working Families                  | **0.443**                      |
| 2006 | NY | 29       | John R "Randy" Kuhl Jr  | Conservative, Independence, Republican                | Eric J Massa           | Democrat, Working Families                  | **0.436**                      |
| 2012 | NY | 27       | Chris Collins           | Conservative, Republican                              | Kathleen C Hochul      | Democrat, Working Families                  | **0.425**                      |
| 2018 | NY | 1        | Lee M Zeldin            | Conservative, Independence, Reform, Republican        | Perry Gershon          | Democrat, Working Families                  | **0.460**                      |
| 2018 | NY | 24       | John M Katko            | Conservative, Independence, Reform, Republican        | Dana Balter            | Democrat, Women's Equality, Working Families | **0.445**                      |
| 2018 | NY | 27       | Chris Collins           | Conservative, Independence, Republican                | Nathan D McMurray      | Democrat, Women's Equality, Working Families | **0.449**                      |
| 2022 | NY | 4        | Anthony P D’Esposito    | Republican, Conservative                              | Laura A Gillen         | Democrat                                    | **0.470**                      |
| 2022 | NY | 17       | Michael V Lawler        | Republican, Conservative                              | Sean Patrick Maloney   | Democrat, Working Families                  | **0.458**                      |
| 2022 | NY | 22       | Brandon M Williams      | Republican, Conservative                              | Francis Conole         | Democrat                                    | **0.485**                      |

: Data for NY Elections, Title Case {.table-small .striped .hover}


<details>
<summary> \> show the code</summary>

```r

fusion_elections <- ELECTION_DATA_HOUSE |> 
  filter(fusion_ticket == TRUE) |> 
  mutate(percentage = candidatevotes / totalvotes, race_id = paste0(state_po, year, district))

winner_percentage <- fusion_elections |>
  group_by(race_id, candidate) |>
  summarize(total_vote = sum(percentage)) |>
  ungroup()

winner_percentage <- winner_percentage |>
  add_count(race_id, name = "race_count") |>  
  filter(race_count > 1) |>  
  select(-race_count)
  
winners_added <- winner_percentage |> 
  group_by(race_id) |> 
  mutate(winner = (total_vote == max(total_vote))) |>
  ungroup()

fusion_elections <- fusion_elections |> 
  inner_join(winners_added, by=c("race_id", "candidate")) |>
  select(year, state, state_po, district, candidate, party, percentage, race_id, total_vote, winner)

fusion_election_IDs <- fusion_elections |> 
  group_by(race_id) |> 
  arrange(desc(percentage)) |> 
  slice(1) |>
  filter(winner == FALSE) |>
  pull(race_id)

final_data <- fusion_elections |> 
  filter(race_id %in% fusion_election_IDs & !is.na(party)) 

result <- final_data |>
  group_by(year, state, district) |>
  summarise(
    winning_candidate = candidate[winner == TRUE],
    winning_party = paste(unique(party[winner == TRUE]), collapse = ", "),
    losing_candidate = candidate[which.max((!winner) * percentage)],
    losing_party = paste(unique(party[winner == FALSE]), collapse = ", "),
    highest_losing_percentage = max(percentage[winner == FALSE], na.rm = TRUE),
    .groups = 'drop'
  )

result <- final_data |>
  group_by(year, state, district) |>
  summarise(
    winning_candidate = unique(candidate[winner == TRUE]),
    winning_party = paste(unique(party[winner == TRUE]), collapse = ", "),
    losing_candidate = unique(candidate[winner == FALSE]),
    losing_party = paste(unique(party[winner == FALSE]), collapse = ", "),
    highest_losing_percentage = max(percentage[winner == FALSE], na.rm = TRUE),
    .groups = 'drop'
  )

print(result)
```

</details>

## Do candidates out run presidents?

<details>
<summary>\> show the code</summary>

```r

election_president_r_d <- ELECTION_DATA_PRESIDENT |> 
  filter(party_detailed == "REPUBLICAN" | party_detailed == "DEMOCRAT" )
  

sum_president_votes_r_d <- election_president_r_d |>
  group_by(year, state, state_po, party_detailed, candidate) |>
  summarize(
    candidate_votes = sum(candidatevotes, na.rm = TRUE),
    total_votes = max(totalvotes, na.rm = TRUE)  # Assuming totalvotes is the same across rows for a state-year
  ) |>
  ungroup() |>
  mutate(id = paste(year, state_po, party_detailed, sep = "_"), pres_percentage = candidate_votes / total_votes) |>
  rename(
        pres_candidate_votes = candidate_votes, 
        pres_total_votes = total_votes
        )

head(sum_president_votes_r_d)

PRESIDENTIAL_YEARS <- seq(1976, 2020, by = 4)

total_votes_per_state <- ELECTION_DATA_HOUSE |>
  filter(year %in% PRESIDENTIAL_YEARS & (party == "REPUBLICAN" | party == "DEMOCRAT")) |>
  group_by(year, state, state_po) |>
  summarize(total_votes = unique(totalvotes, na.rm = TRUE) |> sum()) |>
  ungroup()

sum_house_votes_r_d <- ELECTION_DATA_HOUSE |>
  filter(party %in% c("DEMOCRAT", "REPUBLICAN") & year %in% PRESIDENTIAL_YEARS) |>
  group_by(year, state, state_po, party) |>
  summarize(candidate_votes = sum(candidatevotes, na.rm = TRUE)) |>
  ungroup() |>
  left_join(total_votes_per_state, by = c("year", "state", "state_po")) |>
  mutate(
    id = paste(year, state_po, party, sep = "_"), 
    house_percentage = candidate_votes / total_votes
  ) |>
  rename(
    house_candidate_votes = candidate_votes,
    house_total_votes = total_votes
  ) |>
  select(id, house_candidate_votes, house_total_votes, house_percentage)


state_vote_counts <- sum_president_votes_r_d |>
  left_join(sum_house_votes_r_d, by = "id") |>
  mutate(dif = house_percentage - pres_percentage)


#vote diff between pres and house grouped by state
state_vote_diff_state_score <- state_vote_counts |> 
  group_by(state, party_detailed) |> 
  summarize(state_dif = mean(dif, na.rm = TRUE))
  

View(state_vote_diff_state_score)

#difference between parties for each election between house and president
state_vote_diff_pres_house <- state_vote_counts |> 
  group_by(year, party_detailed) |> 
  summarize(avg_dif = mean(dif, na.rm = TRUE))

View(state_vote_diff_pres_house)

state_vote_diff_pres



SD <- sd(state_vote_diff_pres_house$avg_dif)
MEAN <- mean(state_vote_diff_pres_house$avg_dif)

state_vote_diff_total_score <- state_vote_diff_pres_house |> 
  mutate(score = (avg_dif - MEAN) / SD) |> 
  arrange(desc(score))

View(state_vote_diff_total_score)
```

</details>

## DATA PREP READJUST 


<details>
<summary> \> show code for .shp files</summary>


```r
DIRECTORY <- paste(getwd(),"data", sep="/")

shp_from_zip <- function(file_name, directory = DIRECTORY){
  dir <- paste(directory, file_name, sep="/")
  td <- tempdir(); 
  zip_contents <- unzip(dir, 
                        exdir = td)
  fname_shp <- zip_contents[grepl("shp$", zip_contents)]
  return(read_sf(fname_shp))
}

file <- shp_from_zip("/mp03/congress_shapefiles/congress_095_shapefile.zip")


```



</details>

## 2000 ELECTORAL MAP 

Here is the map for the fateful 2000 Presidential Election. The election that inserted the Electoral College back into the national spotlight. 

![](images/mp-03/2000-electoral-college-map.png)
<details>
<summary>\> show the code</summary>

```r

# Calculate winner for each state for 2000 election and create winning_party field
pres_vote_2000 <- ELECTION_DATA_PRESIDENT |>
  filter(year == 2000) |>                             
  group_by(state, candidate) |>                       
  summarise(total_votes = sum(candidatevotes, na.rm = TRUE)) |>  
  arrange(state, desc(total_votes)) |>                 
  slice_max(total_votes, n = 1, with_ties = FALSE) |>
  mutate(winning_party = ifelse(candidate == "GORE, AL", "D", "R"))


<!-- pres_shp_2000 <- shp_from_zip("/mp03/congress_shapefiles/congress_106_shapefile.zip") -->


# Load .shp file for congressional districts for 2000 
pres_shp_2000 <- read_sf("data/mp03/congress_shapefiles/districtShapes/districts105.shp")



# Make sure STATENAME is clean and able to join
pres_shp_2000 <- pres_shp_2000 |>
  mutate(STATENAME = str_to_upper(str_trim(STATENAME)))

# Make sure state is clean and able to join
pres_vote_2000 <- pres_vote_2000 |>
  mutate(state = str_to_upper(str_trim(state)))

# Join data
pres_map_vote_2000_data <- pres_shp_2000 |>
  left_join(pres_vote_2000, by = c("STATENAME" = "state"))

# Make geometries valid
pres_map_vote_2000_data_g <- pres_map_vote_2000_data |>
  mutate(geometry = st_make_valid(geometry))

# Create state boundaries
state_boundaries <- pres_map_vote_2000_data_g |>
  group_by(STATENAME, winning_party) |>
  summarise(
    geometry = st_union(geometry),
    total_votes = sum(total_votes, na.rm = TRUE)
  ) |>
  ungroup()

# Find electoral college vote totals
electoral_votes_00 <- ELECTION_DATA_HOUSE |> 
  filter(year == 2000) |>
  group_by(year, state) |>
  summarize(votes = n_distinct(district) + 2) |> 
  pivot_wider(names_from = year, values_from = votes)

# Join electoral college votes
state_boundaries  <-  state_boundaries |>
  left_join(electoral_votes_00, by = c("STATENAME" = "state"))

# Handle DC's NA
state_boundaries$`2000`[state_boundaries$STATENAME == "DISTRICT OF COLUMBIA" & is.na(state_boundaries$`2000`)] <- 2
 
# Remove NA values
cleaned_data <- state_boundaries |>
  filter(!is.na(geometry), !is.na(winning_party))

# Define dc_location and assign geometry if needed
dc_location <- state_boundaries |>
  filter(STATENAME == "DISTRICT OF COLUMBIA")

# Check if geometry exists and is not empty
if (nrow(dc_location) == 0 || st_is_empty(dc_location$geometry)) {
  # Manually assign coordinates if geometry is missing or empty
  dc_location <- st_sf(
    STATENAME = "DISTRICT OF COLUMBIA",
    winning_party = "D",
    geometry = st_sfc(st_point(c(-77.0369, 38.9072)), crs = st_crs(state_boundaries))
  )
} else {
  # Calculate centroid if geometry is available
  dc_location <- st_centroid(dc_location)
}

# Calculate centroids using st_point_on_surface to ensure within geometry
state_centroids <- state_boundaries |>
  st_point_on_surface()

# Ensure all layers have the same CRS
state_boundaries <- st_transform(state_boundaries, crs = st_crs(pres_shp_2000))
state_centroids <- st_transform(state_centroids, crs = st_crs(state_boundaries))
dc_location <- st_transform(dc_location, crs = st_crs(state_boundaries))

# Plot the data
ggplot() +
  geom_sf(data = cleaned_data, aes(fill = winning_party), color = NA) +
  geom_sf_text(data = state_centroids, aes(label = `2000`), size = 3, color = "black") +
  geom_sf(data = dc_location, shape = 8, size = 5, color = "gold") +  # Overlay star for DC
  scale_fill_manual(values = c("D" =  alpha("blue", .7), "R" =  alpha("red", .7))) + 
  coord_sf(xlim = c(-130, -60), ylim = c(24, 50)) +
  labs(fill = "Winning Party") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    panel.background = element_blank(),    
    axis.text = element_blank(),           
    axis.ticks = element_blank(),
    axis.title = element_blank(), 
    panel.grid.major = element_blank(),    
    panel.grid.minor = element_blank()     
  )

### Create recent history of Electoral College maps

cleaned_data <- pres_shp_2000 |>
  mutate(geometry = st_make_valid(geometry)) |>
  group_by(STATENAME) |>
  summarize(geometry = st_union(geometry), .groups = "drop")

states_shapes_2000 <- cleaned_data |>
  select(STATENAME,geometry)|>
  group_by(STATENAME)|>
  summarize(geometry = st_union(geometry))|>
  filter(!is.na(geometry))

us_states_sf <- states_shapes_2000 |>
  filter(!is.na(geometry)) |>
  st_make_valid() |>  # Ensure geometries are valid
  st_cast("MULTIPOLYGON") 
  
presidential_winners_by_state <- ELECTION_DATA_PRESIDENT |>
  select(year,state,candidatevotes,candidate,party_simplified) |>
  group_by(year,state) |>
  slice_max(candidatevotes)

presidentials_winners_combined_sf <- presidential_winners_by_state |>
  select(year,state,party_simplified) |>
  left_join(us_states_sf|>select(STATENAME,geometry) |>
  mutate(STATENAME=toupper(STATENAME)),by=c("state"="STATENAME"))

ggplot(presidentials_winners_combined_sf) +
  geom_sf(aes(geometry=geometry,fill = party_simplified), color = "white") +
  scale_fill_manual(values = c("DEMOCRAT" = "blue", "REPUBLICAN" = "red")) +
  coord_sf(xlim = c(-130, -60), ylim = c(24, 50))  +
  labs(fill = "Winning Party") +
  theme_minimal() +
  theme(legend.position = "bottom")+
  facet_wrap(~year)

print("hello")

```
</details>

## Electoral College Schemes 

## Election of 2000

::: {.flexbox-grid}
<div><img src="images/mp-03/1-state-winner-take-all-2000.png" alt="Image 1"></div>
<div><img src="images/mp-03/2-district-winner-take-all-2000.png" alt="Image 2"></div>
<div><img src="images/mp-03/3-state-wide-proportion-2000.png" alt="Image 3"></div>
<div><img src="images/mp-03/4-national-proportion-2000.png" alt="Image 4"></div>
:::

## Election of 2016

::: {.flexbox-grid}
<div><img src="images/mp-03/1-state-winner-take-all-2016.png" alt="Image 1"></div>
<div><img src="images/mp-03/2-district-winner-take-all-2016.png" alt="Image 2"></div>
<div><img src="images/mp-03/3-state-wide-proportion-2016.png" alt="Image 3"></div>
<div><img src="images/mp-03/4-national-proportion-2016.png" alt="Image 4"></div>
:::


<details>
<summary>\> show the code </summary>
```
#####State-Wide Winner-Take-All

# Create popular vote tabulations
popular_vote_summary <- ELECTION_DATA_PRESIDENT |>
  group_by(year, candidate) |>
  summarise(
    popular_vote_count = sum(candidatevotes, na.rm = TRUE),           
    total_votes_year = sum(totalvotes, na.rm = TRUE)                 
  ) |>
  ungroup() |>
  mutate(
    popular_vote_percentage = (popular_vote_count / total_votes_year) * 100   
  ) |>
  select(year, candidate, popular_vote_count, popular_vote_percentage, total_votes_year) |>
  filter(popular_vote_percentage > 4.9) |>
  arrange(year, desc(popular_vote_count))

# Create electoral vote counts for each state in each presidential election
electoral_vote_counts <- ELECTION_DATA_HOUSE |>
  filter(year %in% seq(1976, 2020, by = 4)) |> 
  group_by(year, state) |>
  summarize(votes = n_distinct(district) + 2, .groups = "drop") 

# Create vector of years
years <- unique(electoral_vote_counts$year)

# Ensure Washington DC has 3 votes for each year
electoral_vote_counts <- electoral_vote_counts |>
  bind_rows(
    tibble(
      year = years[!years %in% electoral_votes$year[electoral_votes$state == "DISTRICT OF COLUMBIA"]],
      state = "DISTRICT OF COLUMBIA",
      votes = 3
    )
  ) |>

# Washington DC always has 3 votes in case there are rows with different values
  mutate(votes = ifelse(state == "DISTRICT OF COLUMBIA", 3, votes)) |>
  arrange(year, state)

state_winner_take_all <- ELECTION_DATA_PRESIDENT |>  # 
  group_by(year, state) |>             
  filter(!is.na(candidate)) |>        
  summarise(
    total_votes = sum(candidatevotes, na.rm = TRUE),
    winner_candidate = candidate[which.max(candidatevotes)],
    winner_party = party_detailed[which.max(candidatevotes)],
    .groups = "drop"
  )

# Join the electoral vote counts to the state winner data
state_winner_with_votes <- state_winner_take_all |>
  left_join(electoral_vote_counts, by = c("year", "state"))

# Handle Washington DC 
state_winner_with_votes <- state_winner_with_votes |>
  mutate(
    state_abbr = ifelse(
      state == "District Of Columbia", "DC",  
      state.abb[match(state, state.name)]     
    )
  )

# Function to Title Case and reformat names
reformat_candidate_name <- function(winner_candidate) {
  name_parts <- str_split(winner_candidate, ",\\s*")[[1]]
  formatted_name <- str_to_title(paste(name_parts[2], name_parts[1]))
  return(formatted_name)
}

# Reformat names
state_winner_with_votes <- state_winner_with_votes |>
  mutate(
    proper_name = sapply(winner_candidate, reformat_candidate_name), 
    winner_party = str_replace(winner_party, "DEMOCRATIC", "DEMOCRAT")
    )



state_winner_with_votes <- state_winner_with_votes |>
  mutate(
    state_cleaned = str_trim(str_to_title(state)), 
    state_abbr = ifelse(
      state_cleaned == "District Of Columbia", "DC",  
      state.abb[match(state_cleaned, state.name)]
    )
  ) |>
  select(-state_cleaned)  

 
# Summarize electoral vote totals
calculate_ec_vote_totals <- function(electoral_college_data, election_year) {
  # Filter for the specific election year to avoid aggregating across years
  df_year_requested <- electoral_college_data |>
    filter(year == election_year)

  # Summarize total popular and electoral votes by candidate's proper name and party
  vote_summary <- df_year_requested |>
    group_by(proper_name, winner_party) |>
    summarise(
      ec_vote = sum(votes),
      .groups = "drop"
    )

  # Arrange by ec_vote in descending order to get the winners first
  vote_summary <- vote_summary |>
    arrange(desc(ec_vote))

  # Return the results as two named lists for first and second place candidates
  list(
    first_place = list(
      candidate = vote_summary$proper_name[1],
      party = vote_summary$winner_party[1],
      ec_vote = vote_summary$ec_vote[1]
    ),
    second_place = list(
      candidate = vote_summary$proper_name[2],
      party = vote_summary$winner_party[2],
      ec_vote = vote_summary$ec_vote[2]
    )
  )
}

# Summarize popular vote totals
calculate_popular_vote_totals <- function(popular_vote_data, election_year) {
  # Filter for the specified election year
  df_year_requested <- popular_vote_data |>
    filter(year == election_year)

  # Summarize popular vote counts and percentages by candidate and party
  vote_summary <- df_year_requested |>
    group_by(candidate) |>
    summarise(
      popular_vote_count = sum(popular_vote_count, na.rm = TRUE),
      popular_vote_percentage = mean(popular_vote_percentage, na.rm = TRUE),
      .groups = "drop"
    ) |>
    arrange(desc(popular_vote_count))

  # Return the results as a list with each candidate's information
  list(
    first_place = list(
      candidate = vote_summary$candidate[1],
      popular_vote_count = vote_summary$popular_vote_count[1],
      popular_vote_percentage = vote_summary$popular_vote_percentage[1]
    ),
    second_place = list(
      candidate = vote_summary$candidate[2],
      popular_vote_count = vote_summary$popular_vote_count[2],
      popular_vote_percentage = vote_summary$popular_vote_percentage[2]
    )
  )
}


state_winner_take_all <- function(data_set, election_year, ec_summary_data) {
  # Filter data for the requested election year
  df_year_requested <- data_set |> 
    filter(year == election_year)
  
  # Extract information from the ec_summary_data
  proper_name1 <- ec_summary_data$first_place$candidate
  party1 <- ec_summary_data$first_place$party
  ec_vote1 <- ec_summary_data$first_place$ec_vote
  
  proper_name2 <- ec_summary_data$second_place$candidate
  party2 <- ec_summary_data$second_place$party
  ec_vote2 <- ec_summary_data$second_place$ec_vote
  
  # Create custom legend text with candidate names, parties, popular votes, and electoral votes
  legend_text <- paste0(
    toupper(proper_name1), " (", substr(party1, 1, 1), ")\n",
    "Electoral Votes: ", ec_vote1, "\n",
    toupper(proper_name2), " (", substr(party2, 1, 1), ")\n",
    "Electoral Votes: ", ec_vote2
  )
  
  # Create the plot
  ggplot(df_year_requested, aes(state = state_abbr, fill = winner_party)) +
    statebins::geom_statebins(radius = grid::unit(0.1, "cm")) +
    scale_fill_manual(values = c("DEMOCRAT" = "blue", "REPUBLICAN" = "red"), name = "Winner") +
    labs(
      title = paste("US Electoral College Votes by State-Wide Winner-Take-All (", election_year, ")", sep = ""),
      subtitle = legend_text
    ) +
    theme_minimal() +
    theme(
      legend.position = "none",
      panel.background = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      panel.grid = element_blank(),
      plot.subtitle = element_text(color = "black")
    )
}

ec_summary <- calculate_ec_vote_totals(state_winner_with_votes, 2000)
pop_summary <- calculate_popular_vote_totals(popular_vote_summary, 2000)
state_winner_take_all(state_winner_with_votes, 2000, ec_summary)


#######District-Wide Winner-Take-All + State-Wide “At Large” Votes


# Calculate district winners and add an at_large seat
calculate_district_winners_with_at_large <- function(data) {
  # Calculate district-level winners
  district_winners <- data |>
    group_by(year, state, state_po, district) |>
    filter(candidatevotes == max(candidatevotes)) |>
    summarise(
      party = first(party),
      candidate = first(candidate),
      .groups = "drop"
    ) |>
    mutate(district = as.character(district)) |>
    select(year, state, state_po, district, party)
  
  # Calculate at_large seats based on the majority party in each state per year
  at_large_winners <- district_winners |>
    group_by(year, state, state_po) |>
    count(party, name = "district_count") |>
    slice_max(district_count, n = 1, with_ties = FALSE) |>
    mutate(
      district = "at_large",
      party = party
    ) |>
    select(year, state, state_po, district, party)

  # Combine district winners and at_large results
  bind_rows(district_winners, at_large_winners)
}


# Sum all votes and percentages for each party for each year and each state
calculate_vote_totals_at_large <- function(data) {
  data |>
    mutate(votes = if_else(district == "at_large", 2, 1)) |>
    group_by(year, state, state_po, party) |>
    summarise(total_votes = sum(votes), .groups = "drop") |>
    group_by(year, state, state_po) |>
    mutate(total_state_votes = sum(total_votes)) |>
    mutate(win_percent = round((total_votes / total_state_votes), 4)) |>
    select(-total_state_votes) |>
    arrange(year, state, party) |> 
    mutate(color = ifelse(party == "DEMOCRAT", alpha("blue", win_percent), alpha("red", win_percent)))
}

# First find winners for each district and the at large winner
district_winners_with_at_large <- calculate_district_winners_with_at_large(ELECTION_DATA_HOUSE)
ec_total_at_large <- calculate_vote_totals_at_large(district_winners_with_at_large) 

# Identify all the unique presidential winners
unique_winners_al <- state_winner_with_votes |>
  distinct(year, winner_party, proper_name) |>
  rename("party" = "winner_party")



# Add proper names to EC totals
ec_total_at_large <- ec_total_at_large |>
  left_join(unique_winners_al, by = c("year", "party")) 


plot_electoral_votes <- function(data, election_year) {
  df_year_filtered <- data |>
    filter(year == election_year) |>
    group_by(state, state_po) |>
    slice_max(win_percent, with_ties = FALSE) |>
    ungroup()
  
  total_votes_summary <- df_year_filtered |>
    group_by(proper_name, party) |>
    summarise(total_votes = sum(total_votes), .groups = "drop") |>
    arrange(desc(total_votes))
    
  total_votes_list <- split(total_votes_summary, seq(nrow(total_votes_summary)))
  
  # Manually referencing each element in total_votes_list
  proper_name1 <- total_votes_list[[1]]$proper_name
  winner_party1 <- total_votes_list[[1]]$party
  total_votes1 <- total_votes_list[[1]]$total_votes
  
  proper_name2 <- total_votes_list[[2]]$proper_name
  winner_party2 <- total_votes_list[[2]]$party
  total_votes2 <- total_votes_list[[2]]$total_votes
  
  # Format party abbreviations
  party1 <- ifelse(winner_party1 == "DEMOCRAT", "(D)", "(R)")
  party2 <- ifelse(winner_party2 == "DEMOCRAT", "(D)", "(R)")
  
  # Construct the formatted string using paste and the variables
  output_string <- paste(
    toupper(proper_name1), party1, "\nElectoral Votes:", total_votes1, "\n",
    toupper(proper_name2), party2, "\nElectoral Votes:", total_votes2
  )
   output_string <- sprintf(
    "%s %s\nElectoral Votes: %d\n%s %s\nElectoral Votes: %d",
    toupper(proper_name1), party1, total_votes1,
    toupper(proper_name2), party2, total_votes2
    )
    
  # Create the plot
  ggplot(df_year_filtered, aes(state = state_po, fill = color)) +
    statebins::geom_statebins(radius = grid::unit(0.1, "cm")) +
     scale_fill_identity() +
    labs(
      title = paste("US District-Wide Winner-Take-All + State-Wide “At Large” Votes (", election_year, ")", sep = ""),
      subtitle = paste("Color intensity represents share of Electoral College Votes\n\n",output_string, sep="\n")
    ) +
    theme_minimal() +
    theme(
      legend.position = "right",
      panel.background = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      panel.grid = element_blank(),
      plot.subtitle = element_text(color = "black")
    )
}

plot_electoral_votes(ec_total_at_large, 2016)

########State-Wide Proportional

electon_data_president_p <- ELECTION_DATA_PRESIDENT |> 
    mutate(party_detailed = if_else(party_detailed == "DEMOCRATIC-FARMER-LABOR", "DEMOCRAT", party_detailed)) |>
    filter(party_detailed == "DEMOCRAT" | party_detailed == "REPUBLICAN")

# Get electoral votes for each state for each year
electoral_votes_by_state_p <- ELECTION_DATA_HOUSE |> 
  group_by(year, state, state_po) |>
  summarize(votes = n_distinct(district) + 2)

  

state_percentages_p <- electon_data_president_p |>
  group_by(year, state, state_po, party_detailed) |>
  summarise(
    candidate = first(candidate),
    total_candidate_votes = sum(candidatevotes),
    total_state_votes = first(totalvotes), 
    percentage = total_candidate_votes / total_state_votes
  ) |>
  ungroup() |>
  select(year, state, state_po, candidate, party_detailed, percentage) |>
  group_by(year, state, state_po) |>
  mutate(winner = percentage == max(percentage)) |>
  ungroup()

state_percentages_w_votes_p <- state_percentages_p |>
  right_join(electoral_votes_by_state, by = c("year", "state", "state_po")) |>
  rename(electoral_votes = votes)
 
  
state_electoral_votes_p <- state_percentages_w_votes_p |>
  group_by(year, state, state_po) |>
  mutate(
    # Calculate electoral votes won by the winner (round up)
    electoral_votes_won = ifelse(
      winner,
      ceiling(percentage * electoral_votes),
      electoral_votes - ceiling(percentage[winner == TRUE] * electoral_votes)
    )
  ) |>
  mutate(percent_electoral_votes = round(electoral_votes_won / electoral_votes, 2)) |>
  mutate(color = ifelse(party_detailed == "DEMOCRAT", alpha("blue", percent_electoral_votes), alpha("red",             percent_electoral_votes))) |>
  ungroup()

state_electoral_votes_p <- state_electoral_votes_p |>
  left_join(unique_winners, by = c("year", "party_detailed")) 
  
plot_electoral_votes <- function(data, election_year) {
  df_year_filtered <- data |>
    filter(year == election_year) 
  
  summary <- df_year_filtered |>
    group_by(party_detailed, proper_name) |>
    summarise(total_electoral_votes_won = sum(electoral_votes_won, na.rm = TRUE)) |>
    ungroup()
  print(summary)
  total_votes_list <- split(summary, seq(nrow(summary)))
  print(total_votes_list)
  proper_name1 <- total_votes_list[[1]]$proper_name
  winner_party1 <- total_votes_list[[1]]$party_detailed
  total_votes1 <- total_votes_list[[1]]$total_electoral_votes_won
  
  proper_name2 <- total_votes_list[[2]]$proper_name
  winner_party2 <- total_votes_list[[2]]$party_detailed
  total_votes2 <- total_votes_list[[2]]$total_electoral_votes_won
  
  # Format party abbreviations
  party1 <- ifelse(winner_party1 == "DEMOCRAT", "(D)", "(R)")
  party2 <- ifelse(winner_party2 == "DEMOCRAT", "(D)", "(R)")
  
  # Construct the formatted string using paste and the variables
  output_string <- sprintf(
  "%s %s\nElectoral Votes: %d\n%s %s\nElectoral Votes: %d",
  toupper(proper_name1), party1, total_votes1,
  toupper(proper_name2), party2, total_votes2
)
  df_year_filtered <- df_year_filtered |> 
    filter(winner == TRUE)
  # Create the plot
  ggplot(df_year_filtered, aes(state = state_po, fill = color)) +
    statebins::geom_statebins(radius = grid::unit(0.1, "cm")) +
     scale_fill_identity() +
    labs(
      title = paste("United States Electoral College Votes by State-Wide Proportional (", election_year, ")", sep = ""),
      subtitle = paste("Color intensity represents share of Electoral College Votes\n\n", output_string, sep="\n")
    ) +
    theme_minimal() +
    theme(
      legend.position = "right",
      panel.background = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      panel.grid = element_blank(),
      plot.subtitle = element_text(color = "black")
    )
}


plot_electoral_votes(state_electoral_votes_p, 2016)

######################national vote
election_data_president_n <- ELECTION_DATA_PRESIDENT |> 
    mutate(party_detailed = if_else(party_detailed == "DEMOCRATIC-FARMER-LABOR", "DEMOCRAT", party_detailed)) |>
    filter(party_detailed == "DEMOCRAT" | party_detailed == "REPUBLICAN")

# Get electoral votes for each state for each year
electoral_votes_by_state_n <- ELECTION_DATA_HOUSE |> 
  group_by(year, state, state_po) |>
  summarize(votes = n_distinct(district) + 2)

state_percentages_n <- election_data_president_n |>
  group_by(year, party_detailed, candidate) |>
  summarise(
    total_candidate_votes = sum(candidatevotes, na.rm = TRUE), # Total votes for the candidate across all states
    total_year_votes = sum(totalvotes, na.rm = TRUE) # Total votes for the year across all states
  ) |>
  ungroup() |>
  mutate(
    percentage = total_candidate_votes / total_year_votes # Calculate percentage for the candidate across all states
  ) |>
  select(year, candidate, party_detailed, total_candidate_votes, percentage) |>
  arrange(year, desc(percentage)) 

# Calculate the winner for each year
state_percentages_n <- state_percentages_n |>
  group_by(year) |>
  mutate(winner = percentage == max(percentage)) |>
  ungroup()

expanded_data_n <- state_percentages_n |>
  inner_join(
    electoral_votes_by_state,
    by = "year",
    relationship = "many-to-many"
  ) 

state_electoral_votes_n <- expanded_data_n |>
  group_by(year, state, state_po) |>
  mutate(
  winner_votes = ceiling(percentage[winner == TRUE] * votes),
  # Calculate electoral votes won by the winner (round up)
  electoral_votes_won = ifelse(
    winner,
    winner_votes,
    votes - winner_votes
  )
)
 
# Identify all the unique presidential winners
unique_winners_n <- state_winner_with_votes |>
  distinct(year, winner_party, proper_name) |> 
  rename(party_detailed = winner_party)

# Add proper names
state_electoral_votes_n <- state_electoral_votes |>
  left_join(unique_winners_n, by = c("year", "party_detailed")) 

# Add colors
state_electoral_votes_n <- state_electoral_votes_n |>
   mutate(color = ifelse(party_detailed == "DEMOCRAT", alpha("blue", percentage), alpha("red",             percentage)))

plot_national_proportion <- function(data, election_year) {
  # Filter data for the specified election year
  df_year_filtered <- data |>
    filter(year == election_year)
  print(df_year_filtered)
  # Get summary for EC vote counts  
  summary <- df_year_filtered |>
    group_by(party_detailed, proper_name.y) |>
    summarise(total_electoral_votes_won = sum(electoral_votes_won, na.rm = TRUE)) |>
    ungroup()

  # Break out into list for display
  total_votes_list <- split(summary, seq(nrow(summary)))

  proper_name1 <- total_votes_list[[1]]$proper_name.y
  winner_party1 <- total_votes_list[[1]]$party_detailed
  total_votes1 <- total_votes_list[[1]]$total_electoral_votes_won
  
  proper_name2 <- total_votes_list[[2]]$proper_name.y
  winner_party2 <- total_votes_list[[2]]$party_detailed
  total_votes2 <- total_votes_list[[2]]$total_electoral_votes_won
  
  # Format party abbreviations
  party1 <- ifelse(winner_party1 == "DEMOCRAT", "(D)", "(R)")
  party2 <- ifelse(winner_party2 == "DEMOCRAT", "(D)", "(R)")
  
  # Construct the formatted string using paste and the variables
  output_string <- sprintf(
    "%s %s\nElectoral Votes: %d\n%s %s\nElectoral Votes: %d",
    toupper(proper_name1), party1, total_votes1,
    toupper(proper_name2), party2, total_votes2
    )
  
  # Create the plot
  ggplot(df_year_filtered, aes(state = state_po, fill = color)) +
    statebins::geom_statebins(radius = grid::unit(0.1, "cm")) +
    scale_fill_identity() +
    labs(
      title = paste("United States Electoral College Votes by National Proportion (", election_year, ")", sep = ""),
      subtitle = paste("Color intensity represents share of Electoral College Votes\n\n", output_string,sep="\n")
    ) +
    theme_minimal() +
    theme(
      legend.position = "right",
      panel.background = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      panel.grid = element_blank(),
      plot.subtitle = element_text(color = "black")
    )
}

# Usage
plot_national_proportion(state_electoral_votes_n, 2016)


```

</details>





